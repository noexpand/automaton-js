{"version":3,"sources":["../src/GraphQLQuery.js"],"names":["GraphQLQuery","query","vars","config","inputSchema","variables"],"mappings":";;;;;;;;;AAAA;;;;AACA;;;;AACA;;;;;;;;AAGA;;;;;;;;IAQqBA,Y;AAEjB,0BAAYC,KAAZ,EACA;AAAA;;AACI,aAAKA,KAAL,GAAaA,KAAb;AACA,aAAKC,IAAL,GAAY,IAAZ;AACH;;;;kCAGD;AACI;AACA,gBAAI,CAAC,KAAKA,IAAV,EACA;AACI,qBAAKA,IAAL,GAAY,0BAAWC,iBAAOC,WAAlB,EAA+B,KAAKH,KAApC,CAAZ;AACH;AACD,mBAAO,KAAKC,IAAZ;AACH;;AAGD;;;;;;;;;;gCAOQG,S,EACR;AACI,mBAAO,uBACH;AACIJ,uBAAO,IADX;AAEII;AAFJ,aADG,CAAP;AAMH;;;;;;kBAlCgBL,Y","file":"GraphQLQuery.js","sourcesContent":["import parseQuery from \"./parseQuery\";\nimport config from \"./config\";\nimport graphql from \"./graphql\";\n\n\n/**\n * GraphQL query abstraction for both GraphQL queries and mutations.\n *\n * Can be used to parse application queries only once and then .execute() them.\n *\n * The graphql service will always create a new instance of GraphQLQuery on every request otherwise.\n *\n */\nexport default class GraphQLQuery {\n\n    constructor(query)\n    {\n        this.query = query;\n        this.vars = null;\n    }\n\n    getVars()\n    {\n        // lazily parse query on first usage.\n        if (!this.vars)\n        {\n            this.vars = parseQuery(config.inputSchema, this.query);\n        }\n        return this.vars;\n    }\n\n\n    /**\n     * Executes this GraphQL query/mutation with the given variables\n     *\n     * @param {object} [variables]    variables object map\n     *\n     * @return {Promise<*,*>}   Resolves with query/mutation result or rejects with a GraphQL error.\n     */\n    execute(variables)\n    {\n        return graphql(\n            {\n                query: this,\n                variables\n            }\n        );\n    }\n}\n"]}