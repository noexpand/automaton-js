{"version":3,"sources":["../src/Process.js"],"names":["loadProcessDefinitions","getGraphQLMethodType","fetchProcessInjections","ErrorView","onHistoryAction","renderProcess","renderSubProcess","getCurrentProcess","NO_MATCH","processName","moduleName","isComposite","MODULE_REGEX","matchPath","path","m","exec","shortName","secret","Symbol","AutomatonEnv","React","createContext","currentProcess","unlistenHistory","processes","navigationHistory","ProcessEntry","definition","initProcess","ScopeClass","processDefinitions","ctx","keys","i","length","Error","entry","ProcessDefinition","module","components","default","hasOwnProperty","processModule","name","getLayout","process","currentState","layout","options","prototype","isReactComponent","component","config","findRootProcess","asDialog","parent","findViewComponent","rootProcess","ViewComponent","createEnv","state","scope","renderCurrentView","Layout","env","dialogStack","subProcessEnv","SubProcessViewComponent","inputSchema","ensureInitialized","initialized","ensureNotInitialized","subProcessPromiseFns","subProcessPromise","PROCESS_DEFAULT_OPTIONS","forceSubProcess","Process","id","input","states","subProcessAsDialog","context","access","transition","confirmation","message","confirm","Promise","resolve","action","executeTransition","to","then","pushProcessState","reject","appName","injections","err","element","result","catch","console","error","output","fns","startState","newOpts","TypeError","getFieldTypeByName","fields","gqlMethod","field","type","queryType","getType","queryFieldType","mutationType","mutationFieldType","inject","scopeKeys","prop","GraphQLQuery","query","undefined","names","Object","join","injectionValue","converted","convert","e","msg","JSON","stringify","csrfToken","fetch","window","location","origin","method","credentials","headers","header","value","body","response","json","data","actionFn","target","viewModel","Transition","origScope","mobXActionKey","mobxAction","isCanceled","isDirty","submit","props","title","info","noViewState","navigationId","processId","getURIInfo","obj","replace","push","op","history","stateName","finishInitialization","freeze","renderProcessInternal","asSubProcess","noPriorProcess","processesLen","newProcessId","slice","startTransitionName","String"],"mappings":"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","file":"Process.js","sourcesContent":["import React from \"react\";\nimport { createViewModel } from \"mobx-utils\";\nimport render from \"./render\";\nimport { action, get, keys, set } from \"mobx\";\n\nimport GraphQLQuery from \"./GraphQLQuery\";\nimport { FormConfigProvider, WireFormat } from \"domainql-form\";\nimport config from \"./config\";\nimport Transition from \"./Transition\";\nimport uri from \"./uri\";\nimport i18n from \"./i18n\";\nimport Dialog from \"./Dialog\";\nimport { getWireFormat } from \"./domain\";\n\nconst NO_MATCH = {\n    processName: null,\n    moduleName: null,\n    isComposite: null\n};\n\nconst MODULE_REGEX = /^\\.\\/(processes\\/(.*?)\\/(composites\\/)?)?(.*?).js$/;\n\n\n\nfunction matchPath(path)\n{\n    const m = MODULE_REGEX.exec(path);\n    if (!m)\n    {\n        return NO_MATCH;\n    }\n\n    return {\n        processName: m[2],\n        shortName: m[4],\n        isComposite: !!m[3]\n    }\n}\n\n\nconst secret = Symbol(\"ProcessSecret\");\n\nexport const AutomatonEnv = React.createContext({\n    \"_\": \"default context\"\n});\n\nlet currentProcess = null;\nlet unlistenHistory = null;\nlet processes = [];\n\nexport let navigationHistory = [];\n\n\nfunction ProcessEntry(definition)\n{\n    this.definition = definition;\n    this.initProcess = null;\n    this.ScopeClass = null;\n}\n\nconst processDefinitions = {};\n\n\n/**\n * Loads the process scope, initProcess and components from the given initial data and webpack require context\n *\n * @param ctx       webpack require context\n *\n * @return {{process: *, initProcess: *, ScopeClass: *}}    infrastructural process objects\n */\nexport function loadProcessDefinitions(ctx)\n{\n    const keys = ctx.keys();\n\n    //console.log(\"Modules: \", keys);\n\n    for (let i = 0; i < keys.length; i++)\n    {\n        const moduleName = keys[i];\n\n        const { processName, shortName, isComposite } = matchPath(keys[i]);\n\n        if (!processName)\n        {\n            continue;\n        }\n\n        //console.log(\"loadProcessDefinitions\", { moduleName, processName, shortName, isComposite });\n\n        if (!shortName)\n        {\n            throw new Error(\"Module name '\" + keys[i] + \"' does not match \" + MODULE_REGEX);\n        }\n\n        //console.log(\"-- Process\", m[1]);\n\n        let entry = processDefinitions[processName];\n        if (!entry)\n        {\n            entry = new ProcessEntry(\n                new ProcessDefinition(processName)\n            );\n            processDefinitions[processName] = entry;\n        }\n\n        const module = ctx(moduleName);\n        if (isComposite)\n        {\n            //console.log(\"process\", process);\n            entry.definition.components[shortName] = module.default;\n        }\n    }\n\n    for (let processName in processDefinitions)\n    {\n        if (processDefinitions.hasOwnProperty(processName))\n        {\n            const entry = processDefinitions[processName];\n\n            const path = \"./processes/\" + processName + \"/\" + processName + \".js\";\n            const processModule = ctx(path);\n            if (!processModule)\n            {\n                throw new Error(\"Could not find process exports module \" + path);\n            }\n\n            const { default: ScopeClass, initProcess } = processModule;\n\n            if (!initProcess)\n            {\n                throw new Error(\"No initProcess defined in \" + processName);\n            }\n\n            entry.name = processName;\n            entry.ScopeClass = ScopeClass;\n            entry.initProcess = initProcess;\n        }\n    }\n\n    return processDefinitions;\n}\n\n\nfunction getLayout(process, currentState)\n{\n    const { layout } = process.options;\n\n    if (layout)\n    {\n        // if layout is not a react component\n        if ((!layout.prototype || !layout.prototype.isReactComponent) && currentState)\n        {\n            // use it as lookup map\n            const component = layout[currentState];\n            if (component)\n            {\n                return component;\n            }\n\n            // we can't use the lookup map as react component, so we fall back to either\n            // the \"default\" layout in the lookup or the global default\n            return layout.default || config.layout\n        }\n        return layout;\n    }\n    return config.layout;\n}\n\n\nfunction findRootProcess(process)\n{\n    while (process && process[secret].options.asDialog)\n    {\n        process = process[secret].parent;\n    }\n    return process;\n}\n\n\nfunction findViewComponent(rootProcess)\n{\n    // directly access secret process data\n    const { definition, currentState } = rootProcess[secret];\n\n    //console.log({ definition, currentState });\n\n    const ViewComponent = definition.components[currentState];\n    if (!ViewComponent)\n    {\n        throw new Error(\"No component '\" + currentState + \"' in process '\" + rootProcess.name)\n    }\n\n    return ViewComponent;\n}\n\n\nfunction createEnv(process)\n{\n    return {\n        processName: process && process.name,\n        config: config,\n        state: process && process[secret].currentState,\n        scope: process && process.scope,\n        process: process\n    };\n}\n\n\nfunction renderCurrentView()\n{\n    const rootProcess = findRootProcess(currentProcess);\n\n    const ViewComponent = findViewComponent(rootProcess);\n    const Layout = getLayout(rootProcess, rootProcess[secret].currentState);\n\n    const env = createEnv(rootProcess);\n\n    let dialogStack = false;\n\n    let process = currentProcess;\n\n    while (process !== rootProcess)\n    {\n        const subProcessEnv = createEnv(process);\n        const SubProcessViewComponent = findViewComponent(process);\n\n        dialogStack = (\n            <Dialog process={ process }>\n                <AutomatonEnv.Provider\n                    value={ subProcessEnv }\n                >\n                    <SubProcessViewComponent env={ subProcessEnv }/>\n                    {\n                        dialogStack\n                    }\n                </AutomatonEnv.Provider>\n            </Dialog>\n        );\n\n        process = process[secret].parent;\n    }\n\n    return (\n        <AutomatonEnv.Provider\n            value={ env }\n        >\n            <FormConfigProvider\n                schema={ config.inputSchema }\n            >\n                <Layout\n                    env={ env }\n                >\n                    {\n                        ViewComponent && (\n                            <ViewComponent\n                                env={ env }\n                            />\n                        )\n                    }\n                </Layout>\n                {\n                    dialogStack\n                }\n            </FormConfigProvider>\n        </AutomatonEnv.Provider>\n    )\n}\n\n\nfunction ensureInitialized(process)\n{\n    if (!process[secret].initialized)\n    {\n        throw new Error(\"Process not initialized\");\n    }\n}\n\nfunction ensureNotInitialized(process)\n{\n    if (process[secret].initialized)\n    {\n        throw new Error(\"Process is already initialized\");\n    }\n}\n\nexport class ProcessDefinition {\n    constructor(name)\n    {\n        this.name = name;\n        this.components = {};\n    }\n}\n\n/**\n * Access the resolve and reject functions stored for a sub-process or throws an error when the process is not a sub-process\n *\n * @param process\n */\nfunction subProcessPromiseFns(process)\n{\n    const { subProcessPromise } = process[secret];\n\n    if (!subProcessPromise)\n    {\n        throw new Error(process[secret].name + \" was not invoked as sub-process\");\n    }\n    return subProcessPromise;\n}\n\nconst PROCESS_DEFAULT_OPTIONS = {\n\n    /**\n     * {React.Element|Object<React.Element>} layout component or map of layout components.\n     *\n     * If element, that element is used as layout for the process.\n     *\n     * If it is a map object, the view name will be used to look up the layout. If layout\n     * is registered for the view name, the `\"default\"` key is used. If neither is set,\n     * the global default layout used ( see config.js)\n     *\n     */\n    layout: null,\n\n    /**\n     * {boolean} true to open a sub-process as dialog\n     */\n    asDialog: true,\n\n    /**\n     * If `true` force the process to be used as a sub-process. Throw an error if it is used as root process.\n     */\n    forceSubProcess: false\n};\n\n/**\n * Process facade exposing a limited set of getters and methods as process API\n */\nexport class Process {\n    constructor(id, definition, scope, input, parent)\n    {\n        const { name } = definition;\n\n        this[secret] = {\n            id,\n            name,\n            definition,\n            input,\n            parent,\n            scope,\n\n            states: null,\n            currentState: null,\n\n            options: {\n                ... PROCESS_DEFAULT_OPTIONS,\n                asDialog:  parent ? config.subProcessAsDialog : false\n            },\n\n            subProcessPromise: null,\n\n            initialized: false\n        };\n\n        //console.log(\"PROCESS '\" + name +\"'\", this);\n    }\n\n    get name()\n    {\n        return this[secret].name;\n    }\n\n    get currentState()\n    {\n        return this[secret].currentState;\n    }\n\n    get startState()\n    {\n        return this[secret].startState;\n    }\n\n\n    get states()\n    {\n        return this[secret].states;\n    }\n\n\n    get scope()\n    {\n        return this[secret].scope;\n    }\n\n\n    get options()\n    {\n        return this[secret].options;\n    }\n\n\n    /**\n     * Merges the given object into the options object.\n     *\n     * @param {Object} newOpts   new options\n     */\n    set options(newOpts)\n    {\n        ensureNotInitialized(this);\n\n        if (!newOpts || typeof newOpts !== \"object\")\n        {\n            throw new Error(\"newOpts must be an map object\");\n        }\n\n        this[secret].options = {\n            ... this[secret].options,\n            newOpts\n        };\n    }\n\n    set layout(layout)\n    {\n        if ((layout.prototype && layout.prototype.isReactComponent) || (layout && typeof layout === \"object\"))\n        {\n            this[secret].layout = layout;\n        }\n        else\n        {\n            throw new TypeError(\"Invalid layout: \" + layout);\n        }\n    }\n\n    get input()\n    {\n        return this[secret].input;\n    }\n\n\n    /**\n     * Returns the composite component with the given name.\n     *\n     * @param name      composite name\n     * @return {?React.Element} composite component or null\n     */\n    getComponent(name)\n    {\n        const component = this[secret].components[name];\n        if (!component)\n        {\n            throw new Error(\"Could not find component '\" + name + \"'\");\n        }\n        return component || null;\n    }\n\n\n    /**\n     * Executes the transition with the given name.\n     *\n     * @param name          transition name\n     * @param context       transition context object\n     * @return {Promise<any | never>}\n     */\n    transition(name, context)\n    {\n        //console.log(\"process.transition\" , name, context);\n\n        ensureInitialized(this);\n\n        const access = this[secret];\n\n        const transition = access.states[access.currentState][name];\n        if (!transition)\n        {\n            throw new Error(\"Could not find transition '\" + name + \"' in Process '\" + this.name + \"'\")\n        }\n\n        //console.log(\"TRANSITION\", transition);\n\n        const { confirmation } = transition;\n\n        if (confirmation)\n        {\n            const message = confirmation(context);\n\n            if (message && !confirm(message))\n            {\n                return Promise.resolve(null);\n            }\n        }\n        \n        return (\n            Promise.resolve(\n                transition.action ?\n                    executeTransition(name, transition.action, transition.to, context) :\n                    transition.to\n            )\n                .then(currentState => {\n\n                    if (currentState)\n                    {\n                        access.currentState = currentState;\n                        pushProcessState();\n                    }\n\n                    return render(\n                        renderCurrentView()\n                    )\n                })\n        );\n    }\n\n\n    /**\n     * Returns the transition with the given name from the current state map\n     * \n     * @return {Object} transition entry or null if there is no such transition\n     */\n    getTransition(name)\n    {\n        const access = this[secret];\n\n        //console.log(\"getTransition\", access.currentState, access.states);\n\n        return access.states[access.currentState][name] || null;\n    }\n\n\n    back()\n    {\n        // TODO: implement\n    }\n\n\n    /**\n     * Runs the process with the given name as sub-process.\n     *\n     * @param {String} processName     process name\n     * @param {Object} [input]         input object for the sub-process\n     *\n     * @return {Promise<any>} resolves to the sub-process result or is rejected when the sub-process is aborted.\n     */\n    runSubProcess(processName, input)\n    {\n        // create new promise that will resolve when the sub-process ends\n        return new Promise(\n            (resolve, reject) => fetchProcessInjections(config.appName, processName, input)\n                .then(injections => {\n\n                    //console.log(\"INJECTIONS\", injections);\n\n                    return (\n                        renderSubProcess(processName, input, injections.injections)\n                    );\n                }, err => <ErrorView title=\"Error starting Process\" info={ err } />)\n                .then(element => {\n\n                    //console.log(\"RENDER SUB-PROCESS VIEW\", elem);\n\n                    // store for subProcessPromiseFns\n                    const access = currentProcess[secret];\n                    access.subProcessPromise = {\n                        resolve,\n                        reject\n                    };\n\n                    return render(element);\n                })\n        )\n        .then(result => {\n\n            pushProcessState();\n\n            return render(\n                renderCurrentView()\n            )\n            // make sure to resolve the sub-process result only after the parent view is restored.\n            .then( () => result);\n        })\n        .catch(err => console.error(\"ERROR IN SUB-PROCESS\", err))\n    }\n\n\n    /**\n     * Ends the sub-process successfully and returns the given output object\n     * @param {*} [output]      sub-process output object\n     */\n    endSubProcess(output)\n    {\n        const fns = subProcessPromiseFns(this);\n\n        currentProcess = this[secret].parent;\n\n        fns.resolve(output);\n    }\n\n\n    /**\n     * Aborts the sub-process with an error object\n     *\n     * @param {*} [err]     error object\n     */\n    abortSubProcess(err)\n    {\n        subProcessPromiseFns(this).reject(err);\n    }\n\n}\n\n\nfunction getFieldTypeByName(fields, gqlMethod)\n{\n    for (let i = 0; i < fields.length; i++)\n    {\n        const field = fields[i];\n        if (field.name === gqlMethod)\n        {\n            return field.type;\n        }\n    }\n    return null;\n}\n\n\nexport function getGraphQLMethodType(gqlMethod)\n{\n    if (!gqlMethod)\n    {\n        throw new Error(\"Need gqlMethod\");\n    }\n\n    const queryType = config.inputSchema.getType(\"QueryType\");\n\n    const queryFieldType = getFieldTypeByName(queryType.fields, gqlMethod);\n    if (queryFieldType)\n    {\n        return queryFieldType;\n    }\n    \n    const mutationType = config.inputSchema.getType(\"MutationType\");\n\n    const mutationFieldType = getFieldTypeByName(mutationType.fields, gqlMethod);\n    if (mutationFieldType)\n    {\n        return mutationFieldType;\n    }\n\n    throw new Error(\"Could not find type of GraphQL method '\" + gqlMethod + \"'\");\n}\n\n\nfunction inject(scope, injections)\n{\n    //console.log(\"INJECTIONS\", injections);\n\n    const scopeKeys = keys(scope);\n\n    for (let i = 0; i < scopeKeys.length; i++)\n    {\n        const name = scopeKeys[i];\n\n        const prop = get(scope, name);\n        if (prop instanceof GraphQLQuery)\n        {\n            const result = injections[prop.query];\n            if (result === undefined)\n            {\n                throw new Error(\"Could not find query for prop '\" + name + \"'\");\n            }\n\n            const names = Object.keys(result);\n            if (names.length !== 1)\n            {\n                throw new Error(\"Injection result must have exactly one key: has \" + names.join(\", \"))\n            }\n            const [ gqlMethod ] = names;\n\n            const type = getGraphQLMethodType(gqlMethod);\n\n            const injectionValue = result[gqlMethod];\n            //console.log(\"inject\", name, \"with\", gqlMethod, injectionValue, \"type = \", JSON.stringify(type));\n\n            try\n            {\n                const converted = getWireFormat().convert(type, injectionValue, true);\n\n                //console.log(\"SCOPE:\" + name , \"=\", converted);\n\n                set(scope, name, converted);\n            }\n            catch(e)\n            {\n                const msg = \"Error converting '\" + name + \"'\";\n                console.error(msg, e);\n                throw new Error(msg + \" = \" + JSON.stringify(injectionValue) + \": \" + e);\n            }\n        }\n    }\n}\n\nexport function fetchProcessInjections(appName, processName, input = {})\n{\n    //console.log(\"fetchProcessInjections\", { appName, processName, input });\n\n    const { csrfToken } = config;\n\n    return fetch(\n        window.location.origin + uri(\"/_auto/process/{appName}/{processName}\", {\n                                   appName,\n                                   processName\n                               }),\n        {\n            method: \"POST\",\n            credentials: \"same-origin\",\n            headers: {\n                \"Content-Type\": \"text/plain\",\n\n                // spring security enforces every POST request to carry a csrf token as either parameter or header\n                [csrfToken.header]: csrfToken.value\n            },\n            body: JSON.stringify(input)\n        }\n    )\n        .then(response => response.json())\n        .then(\n            (data) => {\n                if (data.error)\n                {\n                    return Promise.reject(data.error);\n                }\n                return data;\n            }\n        )\n        .catch(err => {\n            console.error(\"ERROR FETCHING PROCESS INJECTIONS\", err)\n\n            return Promise.reject(err);\n        });\n}\n\n\n/**\n * Executes the given transition action function\n *\n * @param {String} name                     Transition name\n * @param {Function<Transition>} actionFn   Transition action function\n * @param {String} [target]                 transition target\n * @param {object} [context]                domain object context\n * @return {Promise<any | never>}\n */\nfunction executeTransition(name, actionFn, target, context)\n{\n    //console.log(\"executeTransition\", {name, actionFn, target, context});\n\n    let viewModel;\n    const transition = new Transition(currentProcess, currentProcess[secret].currentState, target, context);\n\n    const access = currentProcess[secret];\n    const origScope = access.scope;\n    if (origScope)\n    {\n        viewModel = createViewModel(origScope);\n        access.scope = viewModel;\n    }\n\n    const mobXActionKey = \"mobxAction-\" + name;\n\n    let mobxAction = currentProcess[secret][mobXActionKey];\n    if (!mobxAction)\n    {\n        mobxAction = action(\n            currentProcess.name + \".\" + name,\n            actionFn\n        );\n        currentProcess[secret][mobXActionKey] = mobxAction;\n    }\n\n    return new Promise(\n        (resolve, reject) => {\n            try\n            {\n                //console.log(\"EXECUTE MOB-X TRANSITION\", mobxAction, transition);\n\n                resolve(\n                    mobxAction(\n                        transition\n                    )\n                );\n            }\n            catch (e)\n            {\n                reject(e);\n            }\n        }\n    )\n        .then(\n            () => {\n\n                if (!transition.isCanceled)\n                {\n                    if (origScope)\n                    {\n                        if (viewModel.isDirty)\n                        {\n                            viewModel.submit();\n                        }\n                        access.scope = origScope;\n                    }\n\n                    return transition.target\n                }\n            }\n        )\n        .catch(\n            err => {\n                if (origScope)\n                {\n                    access.scope = origScope;\n                }\n                console.error(\"ERROR IN TRANSITION\", err);\n            }\n        );\n}\n\n\nexport function ErrorView(props)\n{\n    const {title, info} = props;\n\n    const Layout = config.layout;\n\n    return (\n        <Layout env={ createEnv(null) }>\n            <div className=\"row\">\n                <div className=\"col\">\n                    <div className=\"alert alert-secondary\">\n                        <h3>\n                            {\n                                title\n                            }\n                        </h3>\n                        <hr/>\n                        <p className=\"text-muted\">\n                            {\n                                info\n                            }\n                        </p>\n                    </div>\n                </div>\n            </div>\n        </Layout>\n    )\n\n}\n\nfunction noViewState()\n{\n    return (\n        <ErrorView\n            title={ i18n(\"View State Gone\") }\n            info={ i18n(\"View State Gone Desc\") }\n        />\n    );\n}\n\n\nexport function onHistoryAction(location, action)\n{\n    const {state} = location;\n    if (action === \"POP\")\n    {\n        if (state)\n        {\n            //console.log(\"POP\", state);\n\n            const { navigationId } = state;\n            const entry = navigationHistory[navigationId];\n\n            if (!entry)\n            {\n                render(\n                    noViewState()\n                )\n            }\n\n            const { processId, currentState } = entry;\n\n            currentProcess = processes[processId];\n\n            currentProcess[secret].currentState = currentState;\n\n            render(\n                renderCurrentView()\n            )\n        }\n        // else\n        // {\n        //     console.log(\"POP no state\");\n        // }\n    }\n}\n\n\nfunction getURIInfo(obj)\n{\n    /// XXX: info?\n    return \"\";\n}\n\n\nfunction pushProcessState(replace = false)\n{\n    const { id, currentState } = currentProcess[secret];\n\n    const navigationId = navigationHistory.length;\n\n    navigationHistory.push({\n        processId: id,\n        currentState\n    });\n\n    const op = replace ? \"replace\" : \"push\";\n\n    //console.log(\"pushProcessState\", op);\n\n    config.history[op](\n        uri(\"/{appName}/{processName}/{stateName}/{info}\",\n            {\n                appName: config.appName,\n                processName: currentProcess.name,\n                stateName: currentState,\n                info: getURIInfo()\n            }, true), {\n            navigationId\n        });\n}\n\n\nfunction finishInitialization(process)\n{\n    //console.log(\"finishInitialization\", process.name);\n\n    const access = process[secret];\n    const { options } = access;\n\n    const keys = Object.keys(options);\n\n    for (let i = 0; i < keys.length; i++)\n    {\n        if (!PROCESS_DEFAULT_OPTIONS.hasOwnProperty(keys[i]))\n        {\n            throw new Error(\"'\" + process.name + \": '\" + name + \"' is not a valid process option\");\n        }\n    }\n\n    access.options = Object.freeze(options);\n    access.initialized = true;\n}\n\n\n/**\n * Internal process render start function\n *\n * @param {String} processName      process name\n * @param {object} input            input map\n * @param {object} injections       injections maps\n * @param {boolean} asSubProcess    launch process as sub-process\n * @return {Promise<React.Element>}\n */\nfunction renderProcessInternal(processName, input, injections, asSubProcess)\n{\n\n    let process;\n    let access;\n\n    const entry = processDefinitions[processName];\n    if (!entry)\n    {\n        throw new Error(\"Could not find process '\" + processName + \"'\");\n    }\n    //console.log(\"PROCESS-ENTRY\", entry);\n\n    const { initProcess, ScopeClass } = entry;\n\n    let scope;\n    if (ScopeClass)\n    {\n        scope = new ScopeClass();\n        inject(scope, injections);\n    }\n    else\n    {\n        scope = null;\n    }\n\n    const noPriorProcess = !currentProcess;\n    if (noPriorProcess)\n    {\n        if (asSubProcess)\n        {\n            throw new Error(\"Cannot launch sub-process without root process\");\n        }\n        config.rootProcess = processName;\n    }\n\n    const processesLen = processes.length;\n    let newProcessId = 0;\n    if (!noPriorProcess)\n    {\n        newProcessId = currentProcess[secret].id + 1;\n        if (newProcessId < processesLen)\n        {\n            // if we are inserting below the maximum available\n            processes = processes.slice(0, newProcessId);\n        }\n    }\n\n    process = new Process(newProcessId, entry.definition, scope, input, asSubProcess ? currentProcess : null);\n    processes.push(process);\n\n    access = process[secret];\n\n    return Promise.resolve(\n        initProcess(process, scope)\n    )\n        .then(\n            ({ startState, states }) => {\n\n                if (process.options.forceSubProcess && !asSubProcess)\n                {\n                    throw new Error(\"Process '\" + process.name + \"' must be run as sub-process\");\n                }\n\n                access.states = states;\n\n                finishInitialization(process);\n\n                currentProcess = process;\n\n                if (typeof startState === \"function\")\n                {\n                    const startTransitionName = process.name + \".start\";\n                    return executeTransition(\n                        startTransitionName,\n                        action(\n                            startTransitionName,\n                            startState\n                        )\n                    );\n                }\n                else\n                {\n                    return String(startState)\n                }\n            }\n        )\n        .then(\n            currentState => {\n\n                if (!currentState)\n                {\n                    throw new Error(\"No initial state\");\n                }\n                access.currentState = currentState;\n\n                pushProcessState(noPriorProcess);\n\n                return renderCurrentView();\n            }\n        )\n        .catch(err => {\n            console.error(\"ERROR IN START PROCESS\", err)\n            return (\n                <ErrorView\n                    title={ i18n(\"Process Startup Error \") }\n                    info={ String(err) }\n                />\n            );\n        })\n}\n\n/**\n * Starts a new root process and renders the first React element tree.\n * The states of the old root process remain in-memory for the user to navigate back.\n *\n * @param {String} processName      process name\n * @param {object} input            input data\n * @param {object} injections       injections for the process\n *\n * @return {Promise<React.Element>}   rendered elements of the first view.\n */\nexport function renderProcess(processName, input, injections)\n{\n    return renderProcessInternal(processName, input, injections, false)\n}\n\n\n/**\n * Starts the process with the given name as sub-process and renders the first React element tree.\n * Ending the subprocess will resume the parent process\n *\n * @param {String} processName      name of process to start as sub-process\n * @param {object} input            input data\n * @param {object} injections                injections for the sub-process\n *\n * @return {Promise<React.Element>}   rendered elements of the first view.\n */\nexport function renderSubProcess(processName, input, injections)\n{\n    return renderProcessInternal(processName, input, injections, true)\n}\n\nexport function getCurrentProcess()\n{\n    return currentProcess;\n}\n\n\n"]}