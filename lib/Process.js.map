{"version":3,"sources":["../src/Process.js"],"names":["loadProcessDefinitions","fetchProcessInjections","onHistoryAction","renderProcess","renderSubProcess","NO_MATCH","processName","moduleName","isComposite","MODULE_REGEX","matchPath","path","m","exec","shortName","secret","Symbol","AutomatonEnv","React","createContext","currentProcess","unlistenHistory","processes","navigationHistory","ProcessEntry","definition","initProcess","ScopeClass","processDefinitions","ctx","keys","i","length","Error","entry","ProcessDefinition","module","components","default","hasOwnProperty","processModule","name","getLayout","process","currentState","layout","prototype","isReactComponent","component","config","renderViewState","ViewComponent","env","state","scope","Object","defineProperty","get","configurable","enumerable","Layout","inputSchema","ensureInitialized","initialized","subProcessPromiseFns","subProcessPromise","Process","id","input","parent","states","context","access","transition","console","log","Promise","resolve","action","executeTransition","to","then","pushProcessState","reject","appName","injections","elem","result","catch","error","err","output","fns","startState","TypeError","inject","scopeKeys","prop","QueryDeclaration","query","undefined","csrfToken","fetch","window","location","origin","method","credentials","headers","header","value","body","JSON","stringify","response","json","data","actionFn","target","viewModel","Transition","origScope","mobXActionKey","mobxAction","e","isCanceled","isDirty","submit","currentObject","noViewState","navigationId","processId","getObjectInfo","obj","encodeURIComponent","number","replace","push","op","history","stateName","info","renderProcessInternal","asSubProcess","noPriorProcess","rootProcess","processesLen","newProcessId","slice","startTransitionName","String"],"mappings":"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","file":"Process.js","sourcesContent":["import React from \"react\";\nimport { createViewModel } from \"mobx-utils\";\nimport render from \"./render\";\nimport { get, keys, set, toJS, action, observable } from \"mobx\";\n\nimport QueryDeclaration from \"./QueryDeclaration\";\nimport FormConfigProvider from \"domainql-form/lib/FormConfigProvider\";\nimport config from \"./config\";\nimport Transition from \"./Transition\";\nimport uri from \"./uri\";\nimport i18n from \"./i18n\";\n\n\nconst NO_MATCH = {\n    processName: null,\n    moduleName: null,\n    isComposite: null\n};\n\nconst MODULE_REGEX = /^\\.\\/(processes\\/(.*?)\\/(composites\\/)?)?(.*?).js$/;\n\n\nfunction matchPath(path)\n{\n    const m = MODULE_REGEX.exec(path);\n    if (!m)\n    {\n        return NO_MATCH;\n    }\n\n    return {\n        processName: m[2],\n        shortName: m[4],\n        isComposite: !!m[3]\n    }\n}\n\n\nconst secret = Symbol(\"ProcessSecret\");\n\nexport const AutomatonEnv = React.createContext({\n    \"_\": \"default context\"\n});\n\nlet currentProcess = null;\nlet unlistenHistory = null;\nlet processes = [];\n\nexport let navigationHistory = [];\n\n\nfunction ProcessEntry(definition)\n{\n    this.definition = definition;\n    this.initProcess = null;\n    this.ScopeClass = null;\n}\n\n\nconst processDefinitions = {};\n\n\n/**\n * Loads the process scope, initProcess and components from the given initial data and webpack require context\n *\n * @param ctx       webpack require context\n *\n * @return {{process: *, initProcess: *, ScopeClass: *}}    infrastructural process objects\n */\nexport function loadProcessDefinitions(ctx)\n{\n    const keys = ctx.keys();\n\n    //console.log(\"Modules: \", keys);\n\n    for (let i = 0; i < keys.length; i++)\n    {\n        const moduleName = keys[i];\n\n        const { processName, shortName, isComposite } = matchPath(keys[i]);\n\n        if (!processName)\n        {\n            continue;\n        }\n\n        //console.log(\"loadProcessDefinitions\", { moduleName, processName, shortName, isComposite });\n\n        if (!shortName)\n        {\n            throw new Error(\"Module name '\" + keys[i] + \"' does not match \" + MODULE_REGEX);\n        }\n\n        //console.log(\"-- Process\", m[1]);\n\n        let entry = processDefinitions[processName];\n        if (!entry)\n        {\n            entry = new ProcessEntry(\n                new ProcessDefinition(processName)\n            );\n            processDefinitions[processName] = entry;\n        }\n\n        const module = ctx(moduleName);\n        if (isComposite)\n        {\n            //console.log(\"process\", process);\n            entry.definition.components[shortName] = module.default;\n        }\n    }\n\n    for (let processName in processDefinitions)\n    {\n        if (processDefinitions.hasOwnProperty(processName))\n        {\n            const entry = processDefinitions[processName];\n\n            const path = \"./processes/\" + processName + \"/\" + processName + \".js\";\n            const processModule = ctx(path);\n            if (!processModule)\n            {\n                throw new Error(\"Could not find process exports module \" + path);\n            }\n\n            const { default: ScopeClass, initProcess } = processModule;\n\n            if (!initProcess)\n            {\n                throw new Error(\"No initProcess defined in \" + processName);\n            }\n\n            entry.name = processName;\n            entry.ScopeClass = ScopeClass;\n            entry.initProcess = initProcess;\n        }\n    }\n\n    return processDefinitions;\n}\n\n\nfunction getLayout(process, currentState)\n{\n    const { layout } = process;\n\n    if (layout)\n    {\n        // if layout is not a react component\n        if ((!layout.prototype || !layout.prototype.isReactComponent) && currentState)\n        {\n            // use it as lookup map\n            const component = layout[currentState];\n            if (component)\n            {\n                return component;\n            }\n\n            // we can't use the lookup map as react component, so we fall back to either\n            // the \"default\" layout in the lookup or the global default\n            return layout.default || config.layout\n        }\n        return layout;\n    }\n    return config.layout;\n}\n\n\nfunction renderViewState()\n{\n    // directly access secret process data\n    const { definition, currentState } = currentProcess[secret];\n\n    //console.log({ definition, currentState });\n\n    const ViewComponent = definition.components[currentState];\n    if (!ViewComponent)\n    {\n        throw new Error(\"No component '\" + currentState + \"' in process '\" + currentProcess.name)\n    }\n\n    //console.log({ ViewComponent });\n\n    const env = {\n        config,\n        state: currentState,\n        scope: currentProcess.scope\n    };\n\n    Object.defineProperty(env, \"process\", {\n        get: () => currentProcess,\n        configurable: false,\n        enumerable: true\n    });\n\n    const Layout = getLayout(currentProcess, currentState);\n\n    //console.log(\"LAYOUT\", Layout);\n\n    return (\n        <AutomatonEnv.Provider\n            value={ env }\n        >\n            <FormConfigProvider\n                schema={ config.inputSchema }\n            >\n                <Layout\n                    env={ env }\n                >\n                    <ViewComponent\n                        env={ env }\n                    />\n                </Layout>\n            </FormConfigProvider>\n        </AutomatonEnv.Provider>\n    )\n}\n\n\nfunction ensureInitialized(process)\n{\n    if (!process[secret].initialized)\n    {\n        throw new Error(\"Process not initialized\");\n    }\n}\n\nexport class ProcessDefinition {\n    constructor(name)\n    {\n        this.name = name;\n        this.components = {};\n    }\n}\n\n/**\n * Access the resolve and reject functions stored for a sub-process or throws an error when the process is not a sub-process\n *\n * @param process\n */\nfunction subProcessPromiseFns(process)\n{\n    const { subProcessPromise } = process[secret];\n\n    if (!subProcessPromise)\n    {\n        throw new Error(process[secret].name + \" was not invoked as sub-process\");\n    }\n    return subProcessPromise;\n}\n\n\n/**\n * Process facade exposing a limited set of getters and methods as process API\n */\nexport class Process {\n    constructor(id, definition, scope, input, parent)\n    {\n        const { name } = definition;\n\n        this[secret] = {\n            id,\n            name,\n            definition,\n            input,\n            parent,\n            scope,\n\n            states: null,\n            currentState: null,\n            layout: null,\n\n            subProcessPromise: null,\n\n            initialized: false\n        };\n    }\n\n\n    /**\n     * Current process object\n     * @type {*}\n     */\n    @observable currentObject = null;\n\n\n    get name()\n    {\n        return this[secret].name;\n    }\n\n\n    get startState()\n    {\n        return this[secret].startState;\n    }\n\n\n    get states()\n    {\n        return this[secret].states;\n    }\n\n\n    get scope()\n    {\n        return this[secret].scope;\n    }\n\n\n    get layout()\n    {\n        return this[secret].layout;\n    }\n\n\n    set layout(layout)\n    {\n        if ((layout.prototype && layout.prototype.isReactComponent) || (layout && typeof layout === \"object\"))\n        {\n            this[secret].layout = layout;\n        }\n        else\n        {\n            throw new TypeError(\"Invalid layout: \" + layout);\n        }\n    }\n\n    get input()\n    {\n        return this[secret].input;\n    }\n\n\n    getComponent(name)\n    {\n        const component = this[secret].components[name];\n        if (!component)\n        {\n            throw new Error(\"Could not find component '\" + name + \"'\");\n        }\n        return component;\n    }\n\n\n    transition(name, context)\n    {\n        //console.log(\"process.transition\" , name, context);\n\n        ensureInitialized(this);\n\n        const access = this[secret];\n\n        const transition = access.states[access.currentState][name];\n        if (!transition)\n        {\n            throw new Error(\"Could not find transition '\" + name + \"' in Process '\" + this.name + \"'\")\n        }\n\n        console.log(\"TRANSITION\", transition);\n\n        return (\n            Promise.resolve(\n                transition.action ?\n                    executeTransition(name, transition.action, transition.to, context) :\n                    transition.to\n            )\n                .then(currentState => {\n\n                    if (currentState)\n                    {\n                        access.currentState = currentState;\n                        pushProcessState();\n                    }\n\n                    return render(\n                        renderViewState(currentState)\n                    )\n                })\n        );\n    }\n\n\n    back()\n    {\n        // TODO: implement\n    }\n\n\n    /**\n     * Runs the process with the given name as sub-process.\n     *\n     * @param processName   process name\n     * @param input         input object for the sub-process\n     *\n     * @return {Promise<any>} resolves to the sub-process result or is rejected when the sub-process is aborted.\n     */\n    runSubProcess(processName, input)\n    {\n        return new Promise((resolve, reject) => {\n\n            return fetchProcessInjections(config.appName, processName, input)\n                .then(injections => {\n\n                    //console.log(\"INJECTIONS\", injections);\n\n                    return (\n                        renderSubProcess(processName, input, injections.injections)\n                            .then(elem => {\n\n                                //console.log(\"RENDER SUB-PROCESS VIEW\", elem);\n\n                                // store for subProcessPromiseFns\n                                currentProcess[secret].subProcessPromise = {\n                                    resolve,\n                                    reject\n                                };\n\n                                render(elem);\n                            })\n                    );\n                })\n        })\n            .then(result => {\n\n                pushProcessState();\n\n                render(\n                    renderViewState()\n                );\n\n                return result;\n            })\n            .catch(err => console.error(\"ERROR IN SUB-PROCESS\", err))\n    }\n\n\n    /**\n     * Ends the sub-process successfully and returns the given output object\n     * @param {*} [output]      sub-process output object\n     */\n    endSubProcess(output)\n    {\n        const fns = subProcessPromiseFns(this);\n\n        currentProcess = this[secret].parent;\n\n        fns.resolve(output);\n    }\n\n\n    /**\n     * Aborts the sub-process with an error object\n     *\n     * @param {*} [err]     error object\n     */\n    abortSubProcess(err)\n    {\n        subProcessPromiseFns(this).reject(err);\n    }\n\n}\n\n\nfunction inject(scope, injections)\n{\n    //console.log(\"INJECTIONS\", injections);\n\n    const scopeKeys = keys(scope);\n\n    for (let i = 0; i < scopeKeys.length; i++)\n    {\n        const name = scopeKeys[i];\n\n        const prop = get(scope, name);\n        if (prop instanceof QueryDeclaration)\n        {\n            const result = injections[prop.query];\n            if (result === undefined)\n            {\n                throw new Error(\"Could not find query for prop '\" + name + \"'\");\n            }\n\n            //console.log(\"inject\", name, \"with\", result);\n\n            set(scope, name, result);\n        }\n    }\n}\n\n\nexport function fetchProcessInjections(appName, processName, input)\n{\n    //console.log(\"fetchProcessInjections\", { appName, processName, input });\n\n    const { csrfToken } = config;\n\n    return fetch(\n        window.location.origin + uri(\"/_auto/process/{appName}/{processName}\", {\n                                   appName,\n                                   processName\n                               }),\n        {\n            method: \"POST\",\n            credentials: \"same-origin\",\n            headers: {\n                \"Content-Type\": \"text/plain\",\n\n                // spring security enforces every POST request to carry a csrf token as either parameter or header\n                [csrfToken.header]: csrfToken.value\n            },\n            body: JSON.stringify(input || {})\n        }\n    )\n        .then(response => response.json())\n        .then(\n            (data) => {\n                if (data.error)\n                {\n                    return Promise.reject(data.error);\n                }\n\n                return data;\n            }\n        )\n        .catch(err => console.error(\"ERROR FETCHING PROCESS INJECTIONS\", err));\n}\n\n\n/**\n * Executes the given transition action function\n *\n * @param {String} name                     Transition name\n * @param {Function<Transition>} actionFn   Transition action function\n * @param {String} [target]                 transition target\n * @param {object} [context]                domain object context\n * @return {Promise<any | never>}\n */\nfunction executeTransition(name, actionFn, target, context)\n{\n    let viewModel;\n    const transition = new Transition(currentProcess, currentProcess[secret].currentState, target, context);\n\n    const access = currentProcess[secret];\n    const origScope = access.scope;\n    if (origScope)\n    {\n        viewModel = createViewModel(origScope);\n        access.scope = viewModel;\n    }\n\n    const mobXActionKey = \"mobxAction-\" + name;\n\n    let mobxAction = currentProcess[secret][mobXActionKey];\n    if (!mobxAction)\n    {\n        mobxAction = action(\n            currentProcess.name + \".\" + name,\n            actionFn\n        );\n        currentProcess[secret][mobXActionKey] = mobxAction;\n    }\n\n    return new Promise(\n        (resolve, reject) => {\n            try\n            {\n                resolve(\n                    mobxAction(\n                        transition\n                    )\n                );\n            }\n            catch (e)\n            {\n                reject(e);\n            }\n        }\n    )\n        .then(\n            () => {\n\n                if (!transition.isCanceled)\n                {\n                    if (origScope)\n                    {\n                        if (viewModel.isDirty)\n                        {\n                            viewModel.submit();\n                        }\n                        access.scope = origScope;\n                    }\n\n                    const { context } = transition;\n                    if (context)\n                    {\n                        currentProcess.currentObject = context;\n                    }\n\n                    return transition.target\n                }\n            }\n        )\n        .catch(\n            err => {\n                if (origScope)\n                {\n                    access.scope = origScope;\n                }\n                console.error(\"ERROR IN TRANSITION\", err);\n            }\n        );\n}\n\n\nfunction noViewState()\n{\n    return (\n        <div className=\"container\">\n            <div className=\"row\">\n                <div className=\"col\">\n                    <div className=\"alert alert-secondary\">\n                        <h3>\n                            {\n                                i18n(\"View State Gone\")\n                            }\n                        </h3>\n                        <hr/>\n                        <p className=\"text-muted\">\n                            {\n                                i18n(\"View State Gone Desc\")\n                            }\n                        </p>\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n}\n\n\nexport function onHistoryAction(location, action)\n{\n    const {state} = location;\n    if (action === \"POP\")\n    {\n        if (state)\n        {\n            //console.log(\"POP\", state);\n\n            const { navigationId } = state;\n            const entry = navigationHistory[navigationId];\n\n            if (!entry)\n            {\n                render(\n                    noViewState()\n                )\n            }\n\n            const { processId, currentState, currentObject } = entry;\n\n            currentProcess = processes[processId];\n            currentProcess.currentObject = currentObject;\n\n            currentProcess[secret].currentState = currentState;\n\n            render(\n                renderViewState()\n            )\n        }\n        // else\n        // {\n        //     console.log(\"POP no state\");\n        // }\n    }\n}\n\n\nfunction getObjectInfo(obj)\n{\n    if (!obj)\n    {\n        return \"\";\n    }\n\n    return encodeURIComponent(obj.number || obj.name || obj.id);\n}\n\n\nfunction pushProcessState(replace = false)\n{\n    const { id, currentState } = currentProcess[secret];\n\n    const { currentObject } = currentProcess;\n\n    const navigationId = navigationHistory.length;\n\n    navigationHistory.push({\n        processId: id,\n        currentState: toJS(currentState),\n        currentObject: toJS(currentObject)\n    });\n\n    const op = replace ? \"replace\" : \"push\";\n\n    //console.log(\"pushProcessState\", op);\n\n    config.history[op](\n        uri(\"/{appName}/{processName}/{stateName}/{info}\",\n            {\n                appName: config.appName,\n                processName: currentProcess.name,\n                stateName: currentState,\n                info: getObjectInfo(currentObject)\n            }, true), {\n            navigationId\n        });\n}\n\n\n/**\n * Internal process render start function\n *\n * @param {String} processName      process name\n * @param {object} input            input map\n * @param {object} injections       injections maps\n * @param {boolean} asSubProcess    launch process as sub-process\n * @return {{Promise<ReactElement>}}\n */\nfunction renderProcessInternal(processName, input, injections, asSubProcess)\n{\n    let process;\n    let access;\n\n    const entry = processDefinitions[processName];\n    if (!entry)\n    {\n        throw new Error(\"Could not find process '\" + processName + \"'\");\n    }\n    //console.log(\"PROCESS-ENTRY\", entry);\n\n    const { initProcess, ScopeClass } = entry;\n\n    let scope;\n    if (ScopeClass)\n    {\n        scope = new ScopeClass();\n        inject(scope, injections);\n    }\n    else\n    {\n        scope = null;\n    }\n\n    const noPriorProcess = !currentProcess;\n    if (noPriorProcess)\n    {\n        if (asSubProcess)\n        {\n            throw new Error(\"Cannot launch sub-process without root process\");\n        }\n        config.rootProcess = processName;\n    }\n\n    const processesLen = processes.length;\n    let newProcessId = 0;\n    if (!noPriorProcess)\n    {\n        newProcessId = currentProcess[secret].id + 1;\n        if (newProcessId < processesLen)\n        {\n            // if we are inserting below the maximum available\n            processes = processes.slice(0, newProcessId);\n        }\n    }\n\n    process = new Process(newProcessId, entry.definition, scope, input, asSubProcess ? currentProcess : null);\n    processes.push(process);\n\n    access = process[secret];\n\n    return Promise.resolve(\n        initProcess(process, scope)\n    )\n        .then(\n            ({ startState, states }) => {\n\n                access.states = states;\n\n                access.initialized = true;\n\n                currentProcess = process;\n\n                if (typeof startState === \"function\")\n                {\n                    const startTransitionName = process.name + \".start\";\n                    return executeTransition(\n                        startTransitionName,\n                        action(\n                            startTransitionName,\n                            startState\n                        )\n                    );\n                }\n                else\n                {\n                    return String(startState)\n                }\n            }\n        )\n        .then(\n            currentState => {\n\n                if (!currentState)\n                {\n                    throw new Error(\"No initial state\");\n                }\n                access.currentState = currentState;\n\n                pushProcessState(noPriorProcess);\n\n                return renderViewState();\n            }\n        )\n        .catch(err => console.error(\"ERROR IN START PROCESS\", err))\n}\n\n\n/**\n * Starts a new root process and renders the first React element tree.\n * The states of the old root process remain in-memory for the user to navigate back.\n *\n * @param {String} processName      process name\n * @param {object} input            input data\n * @param {object} injections       injections for the process\n *\n * @return {Promise<ReactElement>}   rendered elements of the first view.\n */\nexport function renderProcess(processName, input, injections)\n{\n    return renderProcessInternal(processName, input, injections, false)\n}\n\n\n/**\n * Starts the process with the given name as sub-process and renders the first React element tree.\n * Ending the subprocess will resume the parent process\n *\n * @param {String} processName      name of process to start as sub-process\n * @param {object} input            input data\n * @param {object} injections                injections for the sub-process\n *\n * @return {Promise<ReactElement>}   rendered elements of the first view.\n */\nexport function renderSubProcess(processName, input, injections)\n{\n    return renderProcessInternal(processName, input, injections, true)\n}\n\n\n"]}