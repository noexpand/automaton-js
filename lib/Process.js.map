{"version":3,"sources":["../src/Process.js"],"names":["renderProcess","MODULE_REGEX","processes","secret","Symbol","ScopeContext","React","createContext","scope","userScope","applicationScope","process","auth","inject","injections","name","hasOwnProperty","prop","QueryDeclaration","result","query","undefined","Error","initial","ctx","_injections","authentication","contextPath","csrfToken","schema","ScopeClass","initProcess","processAccess","keys","components","i","length","moduleName","m","exec","processName","componentName","Process","push","module","default","states","initialized","startState","Component","env","current","state"],"mappings":"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","file":"Process.js","sourcesContent":["import React from \"react\";\nimport QueryDeclaration from \"./QueryDeclaration\";\nimport FormConfigProvider from \"domainql-form/lib/\";\n\n\nconst MODULE_REGEX = /\\.\\/(.*?)\\/(components\\/(.*?)|.*?)\\.js/;\n\nconst processes = [];\n\nconst secret = Symbol(\"ProcessSecret\");\n\nexport const ScopeContext = React.createContext({\n    scope: {\n        scope: null,\n        userScope: null,\n        applicationScope : null,\n        process: null,\n        auth: null\n    }\n});\n\nfunction inject(scope, injections)\n{\n    for (let name in scope)\n    {\n        if (scope.hasOwnProperty(name))\n        {\n            const prop = scope[name];\n            if (prop instanceof QueryDeclaration)\n            {\n                const result = injections[prop.query];\n                if (result === undefined)\n                {\n                    throw new Error(\"Could not find query for prop '\" + name + \"'\");\n                }\n                scope[name] = result;\n            }\n        }\n    }\n\n}\n\nexport function renderProcess(initial, ctx)\n{\n    const {\n        _injections: injections,\n        authentication,\n        contextPath,\n        csrfToken,\n        schema\n    } = initial;\n\n    let process;\n    let ScopeClass, initProcess, processAccess;\n    const keys = ctx.keys();\n    const components = {};\n\n    for (let i = 0; i < keys.length; i++)\n    {\n        const moduleName = keys[i];\n\n        let m = MODULE_REGEX.exec(moduleName);\n\n        //console.log(m);\n\n        if (!m)\n        {\n            throw new Error(\"Module name '\" + moduleName + \"' does not match \" + MODULE_REGEX);\n        }\n\n        //console.log(\"-- Process\", m[1]);\n\n        const processName = m[1];\n        const componentName = m[3];\n\n        if (i === 0)\n        {\n            process = new Process(processName, components);\n            processAccess = process[secret];\n            processes.push(process);\n        }\n\n        const module = ctx(moduleName);\n        if (componentName)\n        {\n            //console.log(\"process\", process);\n            components[componentName] = module.default;\n        }\n        else\n        {\n            ScopeClass = module.default;\n            initProcess = module.initProcess;\n\n            if (!initProcess)\n            {\n                throw new Error(\"No initProcess defined in \" + moduleName);\n            }\n\n        }\n    }\n\n    const scope = new ScopeClass();\n\n    inject(scope, injections);\n\n    const states = initProcess(process, scope);\n    processAccess.initialized = true;\n    processAccess.startState = states.startState;\n    processAccess.states = states;\n    \n    let Component = components[states.startState];\n\n    if (!Component)\n    {\n        throw new Error(\"No component '\" + states.startState + \"' in process '\" + process.name)\n    }\n\n    const env = {\n        scope,\n        applicationScope: { \"_\": \"notImplemented\" },\n        userScope: { \"_\": \"notImplemented\" },\n        authentication,\n        csrfToken,\n        contextPath\n    };\n\n    return (\n        <ScopeContext.Provider value={ env }>\n            <Component\n                env={ env }\n            />\n        </ScopeContext.Provider>\n    )\n}\n\nexport class Process\n{\n    constructor(name, components)\n    {\n        this[secret] = {\n            name,\n            components,\n            initialized: false,\n            states: null,\n            startState: null,\n            current: null\n        };\n    }\n\n    get name()\n    {\n        return this[secret].name;\n    }\n\n    get components()\n    {\n        return this[secret].components;\n    }\n\n    get startState()\n    {\n        return this[secret].startState;\n    }\n\n    get states()\n    {\n        return this[secret].states;\n    }\n\n    transitionTo(state)\n    {\n        let initialized = this[secret].initialized;\n\n        if (!initialized)\n        {\n            throw new Error(\"Cannot transition in locked process\");\n        }\n        // TODO: implement\n    }\n}\n"]}