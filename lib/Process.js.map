{"version":3,"sources":["../src/Process.js"],"names":["renderProcess","MODULE_REGEX","NOT_IMPLEMENTED","secret","Symbol","AutomatonEnv","React","createContext","inject","scope","injections","scopeKeys","i","length","name","prop","QueryDeclaration","result","query","undefined","Error","ProcessEntry","process","initProcess","ScopeClass","loadProcesses","initial","ctx","keys","processes","moduleName","m","exec","processName","componentName","entry","Process","module","components","default","getLayout","currentState","layout","prototype","isReactComponent","component","setCurrentState","data","states","renderViewState","ViewComponent","inputSchema","InputSchema","initialData","schema","env","contextPath","state","applicationScope","userScope","auth","authentication","Layout","console","log","Authentication","processEntry","stateData","startState","initialized","ensureInitialized","parent","currentObject","array","transition","current","args","Promise","resolve","action","TypeError"],"mappings":"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","file":"Process.js","sourcesContent":["import React from \"react\";\nimport {\n    get,\n    keys,\n    set\n} from \"mobx\";\n\nimport QueryDeclaration from \"./QueryDeclaration\";\nimport FormConfigProvider from \"domainql-form/lib/FormConfigProvider\";\nimport InputSchema from \"domainql-form/lib/InputSchema\";\nimport Authentication from \"./auth\";\nimport { configuration } from \"./configuration\";\n\nconst MODULE_REGEX = /\\.\\/(.*?)\\/(components\\/(.*?)|.*?)\\.js/;\n\nconst NOT_IMPLEMENTED = { \"_\" : \"NOT_IMPLEMENTED\" };\n\nconst secret = Symbol(\"ProcessSecret\");\n\nexport const AutomatonEnv = React.createContext({\n    \"_\" : \"default context\"\n});\n\nfunction inject(scope, injections)\n{\n    //console.log(\"INJECTIONS\", injections);\n\n    const scopeKeys = keys(scope);\n\n    for (let i = 0; i < scopeKeys.length; i++)\n    {\n        const name = scopeKeys[i];\n\n        const prop = get(scope, name);\n        if (prop instanceof QueryDeclaration)\n        {\n            const result = injections[prop.query];\n            if (result === undefined)\n            {\n                throw new Error(\"Could not find query for prop '\" + name + \"'\");\n            }\n\n            //console.log(\"set\", name, \"to\", result);\n\n            set( scope, name, result);\n        }\n    }\n}\n\nfunction ProcessEntry(process)\n{\n    this.process = process;\n    this.initProcess = null;\n    this.ScopeClass = null;\n}\n\n/**\n * Loads the process scope, initProcess and components from the given initial data and webpack require context\n *\n * @param initial   initial data\n * @param ctx       webpack require context\n * \n * @return {{process: *, initProcess: *, ScopeClass: *}}    infrastructural process objects\n */\nfunction loadProcesses(initial, ctx)\n{\n    const keys = ctx.keys();\n\n    const processes = {  };\n\n    for (let i = 0; i < keys.length; i++)\n    {\n        const moduleName = keys[i];\n\n        let m = MODULE_REGEX.exec(moduleName);\n\n        //console.log(m);\n\n        if (!m)\n        {\n            throw new Error(\"Module name '\" + moduleName + \"' does not match \" + MODULE_REGEX);\n        }\n\n        //console.log(\"-- Process\", m[1]);\n\n        const processName = m[1];\n        const componentName = m[3];\n\n        let entry = processes[processName];\n        if (!entry)\n        {\n            entry = new ProcessEntry(\n                new Process(processName)\n            );\n            processes[processName] = entry;\n        }\n\n        const module = ctx(moduleName);\n        if (componentName)\n        {\n            //console.log(\"process\", process);\n            entry.process[secret].components[componentName] = module.default;\n        }\n        else\n        {\n            const { default: ScopeClass, initProcess } = module;\n\n            if (!initProcess)\n            {\n                throw new Error(\"No initProcess defined in \" + moduleName);\n            }\n\n            entry.ScopeClass = ScopeClass;\n            entry.initProcess = initProcess;\n        }\n    }\n    return processes;\n}\n\nfunction getLayout(process, currentState)\n{\n    const { layout } = process;\n\n    if (layout)\n    {\n        if (currentState !== undefined && layout.prototype.isReactComponent)\n        {\n            const component = layout[currentState];\n            if (component)\n            {\n                return component;\n            }\n        }\n        return layout;\n    }\n    return configuration().layout;\n}\n\nfunction setCurrentState(process, currentState)\n{\n    // directly access secret process data\n    const data = process[secret];\n\n    if (!data.states[currentState])\n    {\n        throw new Error(\"Could not find state '\" + currentState + \"' in Process '\" + process.name + \"'\");\n    }\n    data.currentState = currentState;\n}\n\nfunction renderViewState(currentState, process)\n{\n    // directly access secret process data\n    const data = process[secret];\n\n    setCurrentState(process, currentState);\n\n    const ViewComponent = data.components[currentState];\n\n    if (!ViewComponent)\n    {\n        throw new Error(\"No component '\" + currentState + \"' in process '\" + process.name)\n    }\n\n    const inputSchema = new InputSchema(initialData.schema);\n\n    const env = {\n        process,\n        contextPath: initialData.contextPath,\n        state: currentState,\n        scope: data.scope,\n        applicationScope: NOT_IMPLEMENTED,\n        userScope: NOT_IMPLEMENTED,\n        auth: authentication,\n        initialData\n    };\n\n    const Layout = getLayout(process, currentState);\n\n    //console.log(\"LAYOUT\", Layout);\n\n    return (\n        <AutomatonEnv.Provider\n            value={ env }\n        >\n            <FormConfigProvider\n                schema={ inputSchema }\n            >\n                <Layout\n                    env={ env }\n                >\n                    <ViewComponent\n                        env={ env }\n                    />\n                </Layout>\n            </FormConfigProvider>\n        </AutomatonEnv.Provider>\n    )\n}\n\nlet initialData, authentication;\n\n\nexport function renderProcess(initial, ctx, processName = initial.processName)\n{\n    initialData = initial;\n\n    console.log(\"RENDER\", processName);\n\n    const {\n        injections,\n    } = initial;\n\n    authentication = new Authentication(initialData.authentication);\n\n    const processes = loadProcesses(initial, ctx);\n\n    //console.log(\"PROCESSES\", processes);\n    \n    const processEntry = processes[processName];\n\n    if (!processEntry)\n    {\n        throw new Error(\"Could not find process '\" + processName + \"'\");\n    }\n\n    //console.log(\"PROCESS-ENTRY\", processEntry);\n\n    const { process, initProcess, ScopeClass } = processEntry;\n\n    // directly access secret process data\n    const data = process[secret];\n\n    let scope;\n    if (ScopeClass)\n    {\n        scope = new ScopeClass();\n        inject(scope, injections);\n    }\n    else\n    {\n        scope = null;\n    }\n\n    const stateData = initProcess(process, scope);\n\n    const currentState = stateData.startState;\n\n    data.startState = currentState;\n    data.states = stateData.states;\n    data.scope = scope;\n    data.initialized = true;\n\n    initialData = initial;\n\n    return renderViewState(currentState, process);\n}\n\nfunction ensureInitialized(process)\n{\n    if (!process[secret].initialized)\n    {\n        throw new Error(\"Process not initialized\");\n    }\n}\n\n/**\n * Process facade exposing a limited set of getters and methods as process API\n */\nexport class Process {\n    constructor(name, parent)\n    {\n        this[secret] = {\n            name,\n            components: {},\n\n            parent,\n\n            states: null,\n            startState: null,\n\n            currentState: null,\n            currentObject: null,\n\n            scope: null,\n\n            layout: null,\n\n            initialized: false\n        };\n    }\n\n    get name()\n    {\n        return this[secret].name;\n    }\n    \n    get startState()\n    {\n        return this[secret].startState;\n    }\n\n    get states()\n    {\n        return this[secret].states;\n    }\n\n    get layout()\n    {\n        return this[secret].layout;\n    }\n\n    set layout(layout)\n    {\n        if (layout.prototype.isReactComponent || (layout && typeof layout === \"object\"))\n        {\n            this[secret].layout = layout;\n        }\n        else\n        {\n            throw new TypeError(\"Invalid layout: \" + layout);\n        }\n    }\n\n    getComponent(name)\n    {\n        const component = this[secret].components[name];\n        if (!component)\n        {\n            throw new Error(\"Could not find component '\" + name + \"'\");\n        }\n        return component;\n    }\n\n    transition(name, ... args)\n    {\n        ensureInitialized(this);\n\n        const data = this[secret];\n\n        const array = data.states[data.currentState];\n\n        let transition;\n\n        for (let i = 0; i < array.length; i++)\n        {\n            const current = array[i];\n\n            if (current.name === name)\n            {\n                 transition = current;\n                 break;\n            }\n        }\n\n        if (!transition)\n        {\n            throw new Error(\"Could not find transition '\" + name + \"' in Process '\" + this.name + \"'\" )\n        }\n\n        return Promise.resolve(transition.action(args));\n    }\n\n    back()\n    {\n        // TODO: implement\n    }\n}\n"]}