{"version":3,"sources":["../src/config.js"],"names":["addConfig","DEFAULT_OPTS","contextPath","appName","rootProcess","csrfToken","auth","locale","translations","layout","DefaultLayout","inputSchema","history","scopeSyncTimeout","subProcessAsDialog","APP_SCOPE","USER_SCOPE","SESSION_SCOPE","LOCAL_SCOPE","ensureValid","property","Symbol","hasOwnProperty","Error","applyDefaults","theConfig","name","VALID_KEYS","Object","keys","value","push","Proxy","get","config","set","apply","target","thisArg","argumentsList"],"mappings":";;;;;;;;;QAuEgBA,S,GAAAA,S;;AAvEhB;;;;AACA;;;;AACA;;;;;;AAOO,IAAMC;;AAETC,iBAAa,EAFJ;AAGTC,aAAS,IAHA;AAITC,iBAAa,IAJJ;;AAMTC,eAAW,IANF;AAOTC,UAAM,IAPG;;AASTC,YAAQ,IATC;AAUTC,kBAAc,EAVL;;AAYTC,YAAQC,uBAZC;AAaTC,iBAAa,IAbJ;;AAeTC,aAAS,IAfA;;AAiBTC,sBAAkB,IAjBT;;AAmBTC,wBAAoB;;AAnBX,kCAsBRC,qBAtBQ,EAsBI,IAtBJ,kCAuBRC,sBAvBQ,EAuBK,IAvBL,kCAwBRC,yBAxBQ,EAwBQ,IAxBR,kCAyBRC,uBAzBQ,EAyBM,IAzBN,iBAAN;;AA6BP,SAASC,WAAT,CAAqBC,QAArB,EACA;AACI,QAAI,CAACA,QAAD,YAAqBC,MAAzB,EACA;;AAEI,YAAI,CAACpB,aAAaqB,cAAb,CAA4BF,QAA5B,CAAL,EACA;AACI,kBAAM,IAAIG,KAAJ,CAAU,yBAAyBH,QAAnC,CAAN;AACH;AACJ;AACJ;;AAED,SAASI,aAAT,CAAuBC,SAAvB,EACA;AACI,SAAK,IAAIC,IAAT,IAAiBzB,YAAjB,EACA;AACI,YAAIA,aAAaqB,cAAb,CAA4BI,IAA5B,CAAJ,EACA;AACID,sBAAUC,IAAV,IAAkBzB,aAAayB,IAAb,CAAlB;AACH;AACJ;AACJ;;AAGD,IAAMC,aAAaC,OAAOC,IAAP,CAAY5B,YAAZ,CAAnB;;AAGA;;;;;;AAMO,SAASD,SAAT,CAAmB0B,IAAnB,EAAyBI,KAAzB,EACP;AACIH,eAAWI,IAAX,CAAgBL,IAAhB;AACAD,cAAUC,IAAV,IAAkBI,KAAlB;AACH;;AAED;;;;AAIA,IAAML,YAAY,IAAIO,KAAJ,CACd,YAAY,CAEX,CAHa,EAId;AACIC,SAAK,aAAUC,MAAV,EAAkBd,QAAlB,EAA4B;AAC7B,YAAIA,aAAa,MAAjB,EACA;AACI,mBAAOO,UAAP;AACH;;AAEDR,oBAAYC,QAAZ;;AAEA,eAAOc,OAAOd,QAAP,CAAP;AACH,KAVL;AAWIe,SAAK,aAAUD,MAAV,EAAkBd,QAAlB,EAA4BU,KAA5B,EAAmC;;AAEpCX,oBAAYC,QAAZ;;AAEAc,eAAOd,QAAP,IAAmBU,KAAnB;;AAEA,eAAO,IAAP;AACH,KAlBL;AAmBIM,WAAO,eAAUC,MAAV,EAAkBC,OAAlB,EAA2BC,aAA3B,EAA0C;AAC7C;AACA,eAAOZ,UAAP;AACH;AAtBL,CAJc,CAAlB;;AA8BAH,cAAcC,SAAd;kBACeA,S","file":"config.js","sourcesContent":["import React from \"react\"\nimport DefaultLayout from \"./ui/DefaultLayout\";\nimport {\n    APP_SCOPE,\n    LOCAL_SCOPE,\n    SESSION_SCOPE,\n    USER_SCOPE\n} from \"./scopeNames\";\n\nexport const DEFAULT_OPTS = {\n\n    contextPath: \"\",\n    appName: null,\n    rootProcess: null,\n\n    csrfToken: null,\n    auth: null,\n\n    locale: null,\n    translations: {},\n\n    layout: DefaultLayout,\n    inputSchema: null,\n\n    history: null,\n\n    scopeSyncTimeout: 1500,\n\n    subProcessAsDialog: true,\n\n    // standard scopes, might not exist in application\n    [APP_SCOPE]: null,\n    [USER_SCOPE]: null,\n    [SESSION_SCOPE]: null,\n    [LOCAL_SCOPE]: null,\n};\n\n\nfunction ensureValid(property)\n{\n    if (!property instanceof Symbol)\n    {\n\n        if (!DEFAULT_OPTS.hasOwnProperty(property))\n        {\n            throw new Error(\"Invalid config key: \" + property);\n        }\n    }\n}\n\nfunction applyDefaults(theConfig)\n{\n    for (let name in DEFAULT_OPTS)\n    {\n        if (DEFAULT_OPTS.hasOwnProperty(name))\n        {\n            theConfig[name] = DEFAULT_OPTS[name];\n        }\n    }\n}\n\n\nconst VALID_KEYS = Object.keys(DEFAULT_OPTS);\n\n\n/**\n * Adds a new config name and value to the global config object and also adds that name to the list of valid option\n * names\n * @param name\n * @param value\n */\nexport function addConfig(name, value)\n{\n    VALID_KEYS.push(name);\n    theConfig[name] = value;\n}\n\n/**\n * Configuration object\n *\n */\nconst theConfig = new Proxy(\n    function () {\n\n    },\n    {\n        get: function (config, property) {\n            if (property === \"keys\")\n            {\n                return VALID_KEYS;\n            }\n\n            ensureValid(property);\n\n            return config[property];\n        },\n        set: function (config, property, value) {\n\n            ensureValid(property);\n\n            config[property] = value;\n\n            return true;\n        },\n        apply: function (target, thisArg, argumentsList) {\n            //console.log(\"apply\",target, thisArg, argumentsList);\n            return VALID_KEYS;\n        }\n    }\n);\n\napplyDefaults(theConfig);\nexport default theConfig;\n\n"]}