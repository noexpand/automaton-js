{"version":3,"sources":["../src/runProcess.js"],"names":["runProcessURI","runProcess","NUMBER_RE","prepare","s","test","prepareInput","query","input","name","hasOwnProperty","v","Array","isArray","len","length","out","i","uri","url","parse","pathname","appName","config","contextPath","indexOf","baseSegment","processName","baseLen","lastHrefPos","substr","then","injections","err","elem","catch","console","error"],"mappings":"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","file":"runProcess.js","sourcesContent":["import { fetchProcessInjections, renderProcess, ErrorView } from \"./Process\";\nimport config from \"./config\";\nimport render from \"./render\";\nimport url from \"url\";\nimport React from \"react\";\n\nconst NUMBER_RE = /^-?[0-9]{1-15}$/;\n\n\nfunction prepare(s)\n{\n    if (NUMBER_RE.test(s))\n    {\n        return +s;\n    }\n    else\n    {\n        return s;\n    }\n}\n\n\nfunction prepareInput(query)\n{\n    const input = {};\n    for (let name in query)\n    {\n        if (query.hasOwnProperty(name))\n        {\n            const v = query[name];\n\n            if (Array.isArray(v))\n            {\n                const len = v.length;\n                const out = new Array(len);\n                for (let i = 0; i < len; i++)\n                {\n                    out[i] = prepare(v[i]);\n                }\n\n                input[name] = out;\n            }\n            else\n            {\n                input[name] = prepare(v);\n            }\n\n        }\n    }\n\n    return input;\n}\n\n\n/**\n * High-level entry point to execute a process based on a local URI.\n */\nexport function runProcessURI(uri)\n{\n\n    const {pathname, query} = url.parse(uri, true);\n\n    const {appName, contextPath} = config;\n\n    if (contextPath && pathname.indexOf(contextPath) !== 0)\n    {\n        // if we have a context path, we only intercept when the link starts with the context path.\n        return false;\n    }\n\n    const baseSegment = contextPath + \"/\" + appName + \"/\";\n    if (pathname.indexOf(baseSegment) !== 0)\n    {\n        // we don't intercept if the link goes to another end-point\n        return false;\n    }\n\n    let processName;\n    const baseLen = baseSegment.length;\n    const lastHrefPos = pathname.length - 1;\n    if (pathname[lastHrefPos] === \"/\")\n    {\n        processName = pathname.substr(baseLen, lastHrefPos - baseLen);\n    }\n    else\n    {\n        processName = pathname.substr(baseLen)\n    }\n\n    return runProcess(processName, prepareInput(query))\n}\n\n\n/**\n * High-level entry point to execute a process. Performs the whole initialization procedure and then triggers\n * a rendering of the first view-state.\n *\n *\n * @param {String} processName     process name\n * @param {object} [input]         input map (processed format with single strings and numbers)\n *\n * @return {Promise}    promise that resolves after the new process has finished rendering.\n */\nexport default function runProcess(processName, input) {\n\n        return fetchProcessInjections(config.appName, processName, input)\n        .then(\n            ({input, injections}) =>\n                renderProcess(\n                    processName,\n                    input,\n                    injections\n            )\n        , err => <ErrorView title=\"Error running Process\" info={ err } />)\n        .then(elem => render(elem))\n        .catch(err => console.error(\"ERROR RUNNING PROCESS\", err))\n}\n\n"]}