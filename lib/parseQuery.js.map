{"version":3,"sources":["../src/parseQuery.js"],"names":["inputSchema","query","vars","document","kind","Kind","DOCUMENT","Error","JSON","stringify","definitions","i","length","definition","OPERATION_DEFINITION","variableDefinitions","j","variableDefinition","name","variable","value","transformType","type","KIND_NON_NULL","KIND_OBJECT","KIND_SCALAR","KIND_LIST","NON_NULL_TYPE","ofType","NAMED_TYPE","typeDef","getType","LIST_TYPE"],"mappings":";;;;;;kBAiDe,UAASA,WAAT,EAAsBC,KAAtB,EACf;AACI,QAAMC,OAAO,EAAb;;AAEA,QAAMC,WAAW,mBAAMF,KAAN,CAAjB;;AAEA,QAAI,CAACE,QAAD,IAAaA,SAASC,IAAT,KAAkBC,YAAKC,QAAxC,EACA;AACI,cAAM,IAAIC,KAAJ,CAAU,4BAA4BN,KAA5B,GAAoC,MAApC,GAA6CO,KAAKC,SAAL,CAAeN,QAAf,CAAvD,CAAN;AACH;;AARL,QAUYO,WAVZ,GAU4BP,QAV5B,CAUYO,WAVZ;;;AAYI,SAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAID,YAAYE,MAAhC,EAAwCD,GAAxC,EACA;AACI,YAAME,aAAaH,YAAYC,CAAZ,CAAnB;AACA,YAAIE,WAAWT,IAAX,KAAoBC,YAAKS,oBAA7B,EACA;AAAA,gBACYC,mBADZ,GACoCF,UADpC,CACYE,mBADZ;;;AAGI,iBAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAID,oBAAoBH,MAAxC,EAAgDI,GAAhD,EACA;AACI,oBAAMC,qBAAqBF,oBAAoBC,CAApB,CAA3B;;AAEA,oBAAME,OAAOD,mBAAmBE,QAAnB,CAA4BD,IAA5B,CAAiCE,KAA9C;AACAlB,qBAAKgB,IAAL,IAAaG,cAAcrB,WAAd,EAA2BiB,mBAAmBK,IAA9C,CAAb;AACH;AACJ;AACJ;;AAED,WAAOpB,IAAP;AACH,C;;AAhFD;;AACA;;AAGA,IAAMqB,gBAAgB,UAAtB;AACA,IAAMC,cAAc,QAApB;AACA,IAAMC,cAAc,QAApB;AACA,IAAMC,YAAY,MAAlB;;AAEA,SAASL,aAAT,CAAuBrB,WAAvB,EAAoCsB,IAApC,EACA;AACI,QAAIA,KAAKlB,IAAL,KAAcC,YAAKsB,aAAvB,EACA;AACI,eAAO;AACHvB,kBAAMmB,aADH;AAEHK,oBAAQP,cAAcrB,WAAd,EAA2BsB,KAAKA,IAAhC;AAFL,SAAP;AAIH,KAND,MAOK,IAAIA,KAAKlB,IAAL,KAAcC,YAAKwB,UAAvB,EACL;AACI,YAAMX,OAAOI,KAAKJ,IAAL,CAAUE,KAAvB;;AAEA,YAAMU,UAAU9B,YAAY+B,OAAZ,CAAoBb,IAApB,CAAhB;;AAEA,eAAO;AACHd,kBAAM0B,QAAQ1B,IAAR,KAAiBqB,WAAjB,GAA+BA,WAA/B,GAA6CD,WADhD;AAEHN;AAFG,SAAP;AAIH,KAVI,MAWA,IAAII,KAAKlB,IAAL,KAAcC,YAAK2B,SAAvB,EACL;AACI,eAAO;AACH5B,kBAAMsB,SADH;AAEHE,oBAAQP,cAAcrB,WAAd,EAA2BsB,KAAKA,IAAhC;AAFL,SAAP;AAIH;;AAED,UAAM,IAAIf,KAAJ,CAAU,qBAAqBC,KAAKC,SAAL,CAAea,IAAf,CAA/B,CAAN;AACH;;AAGD","file":"parseQuery.js","sourcesContent":["import { parse } from \"graphql/language/parser\"\nimport { Kind } from \"graphql/language/kinds\"\n\n\nconst KIND_NON_NULL = \"NON_NULL\";\nconst KIND_OBJECT = \"OBJECT\";\nconst KIND_SCALAR = \"SCALAR\";\nconst KIND_LIST = \"LIST\";\n\nfunction transformType(inputSchema, type)\n{\n    if (type.kind === Kind.NON_NULL_TYPE)\n    {\n        return {\n            kind: KIND_NON_NULL,\n            ofType: transformType(inputSchema, type.type)\n        };\n    }\n    else if (type.kind === Kind.NAMED_TYPE)\n    {\n        const name = type.name.value;\n\n        const typeDef = inputSchema.getType(name);\n\n        return {\n            kind: typeDef.kind === KIND_SCALAR ? KIND_SCALAR : KIND_OBJECT,\n            name\n        };\n    }\n    else if (type.kind === Kind.LIST_TYPE)\n    {\n        return {\n            kind: KIND_LIST,\n            ofType: transformType(inputSchema, type.type)\n        };\n    }\n\n    throw new Error(\"Unhandled type: \" + JSON.stringify(type));\n}\n\n\n/**\n * Parses the given query and returns a map with type references for the used variables.\n *\n * @param {InputSchema} inputSchema     input schema\n * @param {String} query                GraphQL query document\n *\n * @return {Object} object mapping variable names to type references.\n */\nexport default function(inputSchema, query)\n{\n    const vars = {};\n\n    const document = parse(query);\n\n    if (!document || document.kind !== Kind.DOCUMENT)\n    {\n        throw new Error(\"Could not parse query: \" + query + \" => \" + JSON.stringify(document))\n    }\n\n    const { definitions } = document;\n\n    for (let i = 0; i < definitions.length; i++)\n    {\n        const definition = definitions[i];\n        if (definition.kind === Kind.OPERATION_DEFINITION)\n        {\n            const { variableDefinitions } = definition;\n\n            for (let j = 0; j < variableDefinitions.length; j++)\n            {\n                const variableDefinition = variableDefinitions[j];\n\n                const name = variableDefinition.variable.name.value;\n                vars[name] = transformType(inputSchema, variableDefinition.type);\n            }\n        }\n    }\n\n    return vars;\n}\n"]}