{"version":3,"sources":["../src/sync.js"],"names":["serverSync","storageSync","syncFromStorage","syncFrom","wasCalled","name","scope","uri","csrfToken","config","json","JSON","stringify","calledOnce","console","log","fetch","window","location","origin","method","credentials","headers","header","value","body","then","response","error","Promise","reject","e","storage","setItem","getItem","obj","parse","hasOwnProperty"],"mappings":";;;;;;;;QAWgBA,U,GAAAA,U;QAwDAC,W,GAAAA,W;QAUAC,e,GAAAA,e;QAcAC,Q,GAAAA,Q;;AA3FhB;;;;AACA;;;;;;AAOA,IAAMC,YAAY,EAAlB;;AAGO,SAASJ,UAAT,CAAoBK,IAApB,EAA0BC,KAA1B,EAAiCC,GAAjC,EACP;AACI;AACA,QACA;AAAA,YAEWC,SAFX,GAEwBC,gBAFxB,CAEWD,SAFX;;;AAII,YAAME,OAAOC,KAAKC,SAAL,CACT,gBAAKN,KAAL,CADS,CAAb;;AAIA,YAAMO,aAAaT,UAAUC,IAAV,CAAnB;;AAEA;;AAEA,YAAI,CAACQ,UAAL,EACA;AACIT,sBAAUC,IAAV,IAAkB,IAAlB;;AAEAS,oBAAQC,GAAR,CAAY,qBAAZ;AACH,SALD,MAOA;AACI,mBAAOC,MACHC,OAAOC,QAAP,CAAgBC,MAAhB,GAAyBZ,GADtB,EAEH;AACIa,wBAAQ,MADZ;AAEIC,6BAAa,aAFjB;AAGIC;AACI,oCAAgB;;AADpB,mBAIKd,UAAUe,MAJf,EAIwBf,UAAUgB,KAJlC,CAHJ;AASIC,sBAAMf;AATV,aAFG,EAcFgB,IAdE,CAcG;AAAA,uBAAYC,SAASjB,IAAT,EAAZ;AAAA,aAdH,EAeFgB,IAfE,CAgBC,gBAAa;AAAA,oBAAXE,KAAW,QAAXA,KAAW;;AACT,oBAAIA,KAAJ,EACA;AACI,2BAAOC,QAAQC,MAAR,CAAeF,KAAf,CAAP;AACH;AACJ,aArBF,CAAP;AAuBH;AACJ,KA7CD,CA8CA,OAAOG,CAAP,EACA;AACIjB,gBAAQc,KAAR,CAAc,qBAAd,EAAqCG,CAArC;AACH;AACJ;;AAGM,SAAS9B,WAAT,CAAqBI,IAArB,EAA2BC,KAA3B,EAAkC0B,OAAlC,EACP;AACI,QAAMtB,OAAOC,KAAKC,SAAL,CACT,gBAAKN,KAAL,CADS,CAAb;;AAIA0B,YAAQC,OAAR,CAAgB,eAAe5B,IAA/B,EAAqCK,IAArC;AACH;;AAGM,SAASR,eAAT,CAAyBG,IAAzB,EAA+BC,KAA/B,EAAsC0B,OAAtC,EACP;AACIlB,YAAQC,GAAR,CAAY,iBAAZ,EAA+B,EAACV,UAAD,EAAOC,YAAP,EAAc0B,gBAAd,EAA/B;;AAEA,QAAMtB,OAAOsB,QAAQE,OAAR,CAAgB,eAAe7B,IAA/B,CAAb;AACA,QAAIK,IAAJ,EACA;AACI,YAAMyB,MAAMxB,KAAKyB,KAAL,CAAW1B,IAAX,CAAZ;AACA,eAAOP,SAASE,IAAT,EAAeC,KAAf,EAAsB6B,GAAtB,CAAP;AACH;AACD,WAAO,KAAP;AACH;;AAGM,SAAShC,QAAT,CAAkBE,IAAlB,EAAwBC,KAAxB,EAA+B6B,GAA/B,EACP;AACI,QAAIA,OAAO,QAAOA,GAAP,yCAAOA,GAAP,OAAe,QAA1B,EACA;AACI,+BAAY,YAAM;AACd,iBAAK,IAAI9B,KAAT,IAAiB8B,GAAjB,EACA;AACI,oBAAIA,IAAIE,cAAJ,CAAmBhC,KAAnB,CAAJ,EACA;AACI,mCAAIC,KAAJ,EAAWD,KAAX,EAAiB8B,IAAI9B,KAAJ,CAAjB;AACH;AACJ;AACJ,SARD;AASA,eAAO,IAAP;AACH;AACD,WAAO,KAAP;AACH","file":"sync.js","sourcesContent":["import config from \"./config\"\nimport {\n    toJS,\n    set,\n    runInAction\n} from \"mobx\"\n\n\nconst wasCalled = {};\n\n\nexport function serverSync(name, scope, uri)\n{\n    //console.log(\"serverSync\", { scope, uri });\n    try\n    {\n\n        const {csrfToken} = config;\n\n        const json = JSON.stringify(\n            toJS(scope)\n        );\n\n        const calledOnce = wasCalled[name];\n\n        //console.log(\"lastSync\", calledOnce, \"JSON\", json);\n\n        if (!calledOnce)\n        {\n            wasCalled[name] = true;\n\n            console.log(\"Ignoring first sync\");\n        }\n        else\n        {\n            return fetch(\n                window.location.origin + uri,\n                {\n                    method: \"POST\",\n                    credentials: \"same-origin\",\n                    headers: {\n                        \"Content-Type\": \"text/plain\",\n\n                        // spring security enforces every POST request to carry a csrf token as either parameter or header\n                        [csrfToken.header]: csrfToken.value\n                    },\n                    body: json\n                }\n            )\n                .then(response => response.json())\n                .then(\n                    ({error}) => {\n                        if (error)\n                        {\n                            return Promise.reject(error);\n                        }\n                    }\n                );\n        }\n    }\n    catch (e)\n    {\n        console.error(\"Error in serverSync\", e);\n    }\n}\n\n\nexport function storageSync(name, scope, storage)\n{\n    const json = JSON.stringify(\n        toJS(scope)\n    );\n\n    storage.setItem(\"automaton-\" + name, json);\n}\n\n\nexport function syncFromStorage(name, scope, storage)\n{\n    console.log(\"syncFromStorage\", {name, scope, storage});\n\n    const json = storage.getItem(\"automaton-\" + name);\n    if (json)\n    {\n        const obj = JSON.parse(json);\n        return syncFrom(name, scope, obj)\n    }\n    return false;\n}\n\n\nexport function syncFrom(name, scope, obj)\n{\n    if (obj && typeof obj === \"object\")\n    {\n        runInAction(() => {\n            for (let name in obj)\n            {\n                if (obj.hasOwnProperty(name))\n                {\n                    set(scope, name, obj[name]);\n                }\n            }\n        });\n        return true;\n    }\n    return false;\n}\n\n"]}