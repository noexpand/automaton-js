{"version":3,"sources":["../src/graphql.js"],"names":["defaultErrorHandler","formatGraphQLError","graphql","errors","console","error","table","convertInput","varTypes","variables","wireFormat","out","name","hasOwnProperty","value","varType","Error","convert","query","map","e","message","path","join","locations","l","line","column","params","csrfToken","config","contextPath","queryDecl","GraphQLQuery","log","autoConvert","getVars","fetch","window","location","origin","method","credentials","headers","header","body","JSON","stringify","then","response","json","data","err","Promise","reject","methodName","typeRef"],"mappings":";;;;;QAUgBA,mB,GAAAA,mB;QAqCAC,kB,GAAAA,kB;kBAmCQC,O;;AAlFxB;;;;AACA;;AACA;;;;AACA;;;;;;AAGA;;;;AAIO,SAASF,mBAAT,CAA6BG,MAA7B,EACP;AACIC,YAAQC,KAAR,CAAc,wBAAd;AACAD,YAAQE,KAAR,CAAcH,MAAd;AACH;;AAGD,SAASI,YAAT,CAAsBC,QAAtB,EAAgCC,SAAhC,EACA;AACI,QAAI,CAACA,SAAL,EACA;AACI;AACH;;AAED,QAAMC,aAAa,4BAAnB;;AAEA,QAAMC,MAAM,EAAZ;;AAEA,SAAK,IAAIC,IAAT,IAAiBH,SAAjB,EACA;AACI,YAAIA,UAAUI,cAAV,CAAyBD,IAAzB,CAAJ,EACA;AACI,gBAAME,QAAQL,UAAUG,IAAV,CAAd;AACA,gBAAMG,UAAUP,SAASI,IAAT,CAAhB;AACA,gBAAI,CAACG,OAAL,EACA;AACI,sBAAM,IAAIC,KAAJ,CAAU,sCAAsCJ,IAAtC,GAA6C,GAAvD,CAAN;AACH;;AAEDD,gBAAIC,IAAJ,IAAYF,WAAWO,OAAX,CAAmBF,OAAnB,EAA4BD,KAA5B,EAAmC,KAAnC,CAAZ;AACH;AACJ;;AAED,WAAOH,GAAP;AACH;;AAGM,SAASV,kBAAT,CAA4BiB,KAA5B,EAAmCf,MAAnC,EACP;AACI,WAAO,OAAOe,KAAP,GAAe,MAAf,GACAf,OAAOgB,GAAP,CACI;AAAA,eACJC,EAAEC,OAAF,IACED,EAAEE,IAAF,GAEF,aACAF,EAAEE,IAAF,CAAOC,IAAP,CAAY,GAAZ,CAHE,GAIM,EALR,IAMA,GANA,IAOCH,EAAEI,SAAF,GAAcJ,EAAEI,SAAF,CAAYL,GAAZ,CACX;AAAA,mBACJ,UACAM,EAAEC,IADF,GAEA,IAFA,GAGAD,EAAEE,MAJE;AAAA,SADW,EAMbJ,IANa,CAMR,IANQ,CAAd,GAMc,EAbf,IAcA,IAfI;AAAA,KADJ,CADP;AAoBH;;AAGD;;;;;;;;;;AAUe,SAASrB,OAAT,CAAiB0B,MAAjB,EAAyB;;AAEpC;;AAFoC,QAI7BC,SAJ6B,GAIHC,gBAJG,CAI7BD,SAJ6B;AAAA,QAIlBE,WAJkB,GAIHD,gBAJG,CAIlBC,WAJkB;;;AAMpC,QAAIC,kBAAJ;AACA,QAAIJ,OAAOV,KAAP,YAAwBe,sBAA5B,EACA;AACID,oBAAYJ,OAAOV,KAAnB;AACH,KAHD,MAKA;AACId,gBAAQ8B,GAAR,CAAY,gBAAZ;;AAEAF,oBAAY,IAAIC,sBAAJ,CAAiBL,OAAOV,KAAxB,CAAZ;AACH;;AAED,QAAMiB,cAAcP,OAAOO,WAAP,KAAuB,KAA3C;;AAlBoC,QAoB/B1B,SApB+B,GAoBlBmB,MApBkB,CAoB/BnB,SApB+B;;AAqBpC,QAAI0B,WAAJ,EACA;AACI1B,oBAAYF,aAAayB,UAAUI,OAAV,EAAb,EAAkC3B,SAAlC,CAAZ;AACH;;AAED,WAAO4B,MACHC,OAAOC,QAAP,CAAgBC,MAAhB,GAAyBT,WAAzB,GAAuC,UADpC,EAEH;AACIU,gBAAQ,MADZ;AAEIC,qBAAa,aAFjB;AAGIC;AACI,4BAAgB;;AADpB,WAIKd,UAAUe,MAJf,EAIwBf,UAAUf,KAJlC,CAHJ;AASI+B,cAAMC,KAAKC,SAAL,CAAe;AACjB7B,mBAAOc,UAAUd,KADA;AAEjBT;AAFiB,SAAf;AATV,KAFG,EAiBFuC,IAjBE,CAiBG;AAAA,eAAYC,SAASC,IAAT,EAAZ;AAAA,KAjBH,EAkBFF,IAlBE,CAmBC,gBAAoB;AAAA,YAAlBG,IAAkB,QAAlBA,IAAkB;AAAA,YAAZhD,MAAY,QAAZA,MAAY;;AAChB,YAAIA,MAAJ,EACA;AACI,gBAAMiD,MAAM,IAAIpC,KAAJ,CACRf,mBAAmB+B,UAAUd,KAA7B,EAAoCf,MAApC,CADQ,CAAZ;;AAIA,mBAAOkD,QAAQC,MAAR,CAAeF,GAAf,CAAP;AACH;;AAED,YAAIjB,WAAJ,EACA;AACI,iBAAK,IAAIoB,UAAT,IAAuBJ,IAAvB,EACA;AACI,oBAAIA,KAAKtC,cAAL,CAAoB0C,UAApB,CAAJ,EACA;AACI,wBAAMC,UAAU,mCAAqBD,UAArB,CAAhB;;AAEA;;AAEAJ,yBAAKI,UAAL,IAAmB,6BAAgBtC,OAAhB,CAAwBuC,OAAxB,EAAiCL,KAAKI,UAAL,CAAjC,EAAmD,IAAnD,CAAnB;;AAEA;AACH;AACJ;AACJ;;AAED,eAAOJ,IAAP;AACH,KA/CF,CAAP;AAiDH","file":"graphql.js","sourcesContent":["import config from \"./config\"\nimport { getWireFormat } from \"./domain\";\nimport GraphQLQuery from \"./GraphQLQuery\";\nimport { getGraphQLMethodType } from \"./Process\";\n\n\n/**\n * Logs graphql errors\n * @param errors\n */\nexport function defaultErrorHandler(errors)\n{\n    console.error(\"GraphQL Request failed\");\n    console.table(errors);\n}\n\n\nfunction convertInput(varTypes, variables)\n{\n    if (!variables)\n    {\n        return;\n    }\n\n    const wireFormat = getWireFormat();\n\n    const out = {};\n\n    for (let name in variables)\n    {\n        if (variables.hasOwnProperty(name))\n        {\n            const value = variables[name];\n            const varType = varTypes[name];\n            if (!varType)\n            {\n                throw new Error(\"Cannot convert invalid variable '\" + name + \"'\");\n            }\n\n            out[name] = wireFormat.convert(varType, value, false);\n        }\n    }\n\n    return out;\n}\n\n\nexport function formatGraphQLError(query, errors)\n{\n    return \"\\n\" + query + \"\\n\\n\" +\n           errors.map(\n               e => (\n           e.message +\n           ( e.path ? (\n\n           \"\\nPath: \" +\n           e.path.join(\".\")\n               ) : \"\") +\n           \" \" +\n           (e.locations ? e.locations.map(\n               l =>\n           \"line \" +\n           l.line +\n           \", \" +\n           l.column\n           ).join(\", \") : \"\") +\n           \"\\n\"\n               )\n           );\n}\n\n\n/**\n * GraphQL query service\n *\n * @param {Object} params                   Parameters\n * @param {String} params.query             query string\n * @param {Object} [params.variables]       query variables\n * @param {Object} [params.autoConvert]     if false, don't convert input ( default is true)\n *\n * @returns {Promise<any>} Promise resolving to query data\n */\nexport default function graphql(params) {\n\n    //console.log(\"QUERY: \", params);\n\n    const {csrfToken, contextPath} = config;\n\n    let queryDecl;\n    if (params.query instanceof GraphQLQuery)\n    {\n        queryDecl = params.query;\n    }\n    else\n    {\n        console.log(\"NEW QUERY DECL\");\n\n        queryDecl = new GraphQLQuery(params.query);\n    }\n\n    const autoConvert = params.autoConvert !== false;\n\n    let {variables} = params;\n    if (autoConvert)\n    {\n        variables = convertInput(queryDecl.getVars(), variables);\n    }\n\n    return fetch(\n        window.location.origin + contextPath + \"/graphql\",\n        {\n            method: \"POST\",\n            credentials: \"same-origin\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n\n                // spring security enforces every POST request to carry a csrf token as either parameter or header\n                [csrfToken.header]: csrfToken.value\n            },\n            body: JSON.stringify({\n                query: queryDecl.query,\n                variables\n            })\n        }\n    )\n        .then(response => response.json())\n        .then(\n            ({data, errors}) => {\n                if (errors)\n                {\n                    const err = new Error(\n                        formatGraphQLError(queryDecl.query, errors)\n                    );\n\n                    return Promise.reject(err);\n                }\n\n                if (autoConvert)\n                {\n                    for (let methodName in data)\n                    {\n                        if (data.hasOwnProperty(methodName))\n                        {\n                            const typeRef = getGraphQLMethodType(methodName);\n\n                            //console.log(\"AUTO-CONVERT\", methodName, \"type = \", typeRef);\n\n                            data[methodName] = getWireFormat().convert(typeRef, data[methodName], true);\n\n                            //console.log(\"converted\", data[methodName]);\n                        }\n                    }\n                }\n\n                return data;\n            }\n        );\n}\n"]}