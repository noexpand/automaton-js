{"version":3,"sources":["../src/Transition.js"],"names":["secret","Symbol","Transition","process","source","target","context","isCanceled","value","name","access","console","log","states","Error"],"mappings":";;;;;;;;;;AAAA,IAAMA,SAASC,OAAO,kBAAP,CAAf;;AAEA;;;;IAGqBC,U;AACjB,wBAAYC,OAAZ,EAAqBC,MAArB,EAA6BC,MAA7B,EAAqCC,OAArC,EACA;AAAA;;AACI,aAAKN,MAAL,IAAe;AACXG,qBAASA,OADE;AAEXC,oBAAQA,MAFG;AAGXC,oBAAQA,MAHG;AAIXC,qBAASA,OAJE;AAKXC,wBAAY;AALD,SAAf;AAOH;;AAGD;;;;;;;;;;;AAiFA;;;;iCAKA;AACI,iBAAKP,MAAL,EAAaO,UAAb,GAA0B,IAA1B;AACA,iBAAKP,MAAL,EAAaK,MAAb,GAAsB,IAAtB;AACH;;;4BAnFD;AACI,mBAAO,KAAKL,MAAL,EAAaG,OAApB;AACH;;AAGD;;;;;;;4BAKA;AACI,mBAAO,KAAKH,MAAL,EAAaM,OAApB;AACH,S;0BAGWE,K,EACZ;AACI,iBAAKR,MAAL,EAAaM,OAAb,GAAuBE,KAAvB;AACH;;AAGD;;;;;;;;4BAMA;AACI,mBAAO,KAAKR,MAAL,EAAaO,UAApB;AACH;;AAGD;;;;;;;;4BAMA;AACI,mBAAO,KAAKP,MAAL,EAAaI,MAApB;AACH;;AAGD;;;;;;;;4BAMA;AACI,mBAAO,KAAKJ,MAAL,EAAaK,MAApB;AACH;;AAGD;;;;;0BAIWI,I,EACX;AACI,gBAAMC,SAAS,KAAKV,MAAL,CAAf;;AADJ,gBAGWG,OAHX,GAGsBO,MAHtB,CAGWP,OAHX;;;AAKIQ,oBAAQC,GAAR,CAAY,uBAAZ,EAAqCT,OAArC;;AAEA,gBAAI,CAACA,QAAQU,MAAR,CAAeJ,IAAf,CAAL,EACA;AACI,sBAAM,IAAIK,KAAJ,CAAU,MAAML,IAAN,GAAa,yCAAb,GAAyDN,QAAQM,IAAjE,GAAwE,GAAlF,CAAN;AACH;;AAEDC,mBAAOL,MAAP,GAAgBI,IAAhB;AACH;;;;;;kBA3FgBP,U","file":"Transition.js","sourcesContent":["const secret = Symbol(\"TransitionSecret\");\n\n/**\n * Encapsulates a runtime transition within a process.\n */\nexport default class Transition {\n    constructor(process, source, target, context)\n    {\n        this[secret] = {\n            process: process,\n            source: source,\n            target: target,\n            context: context,\n            isCanceled: false\n        }\n    }\n\n\n    /**\n     * Process this transition happens in.\n     *\n     * @return {*}\n     */\n    get process()\n    {\n        return this[secret].process;\n    }\n\n\n    /**\n     * Context object. Can be set by calling t.selectTargetObject().\n     * @return {*}\n     */\n    get context()\n    {\n        return this[secret].context;\n    }\n\n\n    set context(value)\n    {\n        this[secret].context = value;\n    }\n\n\n    /**\n     * Returns true if the transition has been canceled.\n     *\n     * @return {boolean}\n     */\n    get isCanceled()\n    {\n        return this[secret].isCanceled;\n    }\n\n\n    /**\n     * Source state\n     *\n     * @return {String}\n     */\n    get source()\n    {\n        return this[secret].source;\n    }\n\n\n    /**\n     * Returns the current target state\n     *\n     * @return {String}\n     */\n    get target()\n    {\n        return this[secret].target;\n    }\n\n\n    /**\n     * Sets the current target state\n     * @param name\n     */\n    set target(name)\n    {\n        const access = this[secret];\n\n        const {process} = access;\n\n        console.log(\"Process of transition\", process);\n\n        if (!process.states[name])\n        {\n            throw new Error(\"'\" + name + \"' is no valid target state in process '\" + process.name + \"'\");\n        }\n\n        access.target = name;\n    }\n\n\n    /**\n     * Cancels the transition and reverts the process scope changes.\n     *\n     */\n    cancel()\n    {\n        this[secret].isCanceled = true;\n        this[secret].target = null;\n    }\n}\n"]}