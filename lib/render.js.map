{"version":3,"sources":["../src/render.js"],"names":["render","elem","targetId","React","isValidElement","Error","Promise","resolve","reject","ReactDOM","document","getElementById","e"],"mappings":";;;;;kBAWwBA,M;;AAXxB;;;;AACA;;;;;;AAEA;;;;;;;;AAQe,SAASA,MAAT,CAAgBC,IAAhB,EAAyC;AAAA,QAAnBC,QAAmB,uEAAR,MAAQ;;;AAEpD,QAAI,CAACC,gBAAMC,cAAN,CAAqBH,IAArB,CAAL,EACA;AACI,cAAM,IAAII,KAAJ,CAAU,gCAAgCJ,IAA1C,CAAN;AACH;;AAED,WAAO,IAAIK,OAAJ,CACH,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACjB,YACA;AACIC,+BAAST,MAAT,CACIC,IADJ,EAEIS,SAASC,cAAT,CAAwBT,QAAxB,CAFJ,EAGIK,OAHJ;AAKH,SAPD,CAQA,OAAOK,CAAP,EACA;AACIJ,mBAAOI,CAAP;AACH;AACJ,KAdE,CAAP;AAgBH","file":"render.js","sourcesContent":["import React from \"react\"\nimport ReactDOM from \"react-dom\"\n\n/**\n * Renders the given React element and returns a promise that resolves when the rendering is done.\n *\n * @param {React.Element} elem      element to render\n * @param {String} [targetId]       Id attribute of the element to render into (default is our \"root\" element)\n * \n * @return {Promise<>}  promise that resolves after the element has rendered. Exceptions happening during the ReactDOM.render call will cause a rejection of the promise.\n */\nexport default function render(elem, targetId = \"root\") {\n\n    if (!React.isValidElement(elem))\n    {\n        throw new Error(\"Not a valid react element: \" + elem);\n    }\n\n    return new Promise(\n        (resolve, reject) => {\n            try\n            {\n                ReactDOM.render(\n                    elem,\n                    document.getElementById(targetId),\n                    resolve\n                );\n            }\n            catch (e)\n            {\n                reject(e);\n            }\n        }\n    );\n}\n"]}