{"version":3,"sources":["../src/render.js"],"names":["render","elem","targetId","React","isValidElement","Error","Promise","ReactDOM","document","getElementById","resolve"],"mappings":";;;;;kBAWwBA,M;;AAXxB;;;;AACA;;;;;;AAEA;;;;;;;;AAQe,SAASA,MAAT,CAAgBC,IAAhB,EAAyC;AAAA,QAAnBC,QAAmB,uEAAR,MAAQ;;;AAEpD,QAAI,CAACC,gBAAMC,cAAN,CAAqBH,IAArB,CAAL,EACA;AACI,cAAM,IAAII,KAAJ,CAAU,gCAAgCJ,IAA1C,CAAN;AACH;;AAED,WAAO,IAAIK,OAAJ,CACH;AAAA,eACIC,mBAASP,MAAT,CACIC,IADJ,EAEIO,SAASC,cAAT,CAAwBP,QAAxB,CAFJ,EAGIQ,OAHJ,CADJ;AAAA,KADG,CAAP;AAQH","file":"render.js","sourcesContent":["import React from \"react\"\nimport ReactDOM from \"react-dom\"\n\n/**\n * Renders the given React element and returns a promise that resolves when the rendering is done.\n *\n * @param {React.Element} elem      element to render\n * @param {String} [targetId]       Id attribute of the element to render into (default is our \"root\" element)\n * \n * @return {Promise<any>}\n */\nexport default function render(elem, targetId = \"root\") {\n\n    if (!React.isValidElement(elem))\n    {\n        throw new Error(\"Not a valid react element: \" + elem);\n    }\n\n    return new Promise(\n        resolve =>\n            ReactDOM.render(\n                elem,\n                document.getElementById(targetId),\n                resolve\n            )\n    );\n}\n"]}