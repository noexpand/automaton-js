{"version":3,"sources":["../src/withScope.js"],"names":["withScope","Component","props","ctx","React","displayName"],"mappings":";;;;;;;;;;kBAawBA,S;;AAbxB;;;;AACA;;;;AACA;;;;;;;;;;AAGA;;;;;;;;AAQe,SAASA,SAAT,CAAmBC,SAAnB,EACf;AAAA;;AACI;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA,qCAMQ;AAAA;;AAEI,uBACI;AAAC,yCAAD,CAAc,QAAd;AAAA;AAEQ;AAAA,+BAAO,8BAAC,SAAD,eACE,OAAKC,KADP,EAEGC,GAFH,EAAP;AAAA;AAFR,iBADJ;AAWH;AAnBT;;AAAA;AAAA,MACgCC,gBAAMH,SADtC,UAGeI,WAHf,GAG6B,eAAe,8BAAeJ,SAAf,CAAf,GAA2C,GAHxE;AAsBH","file":"withScope.js","sourcesContent":["import React from \"react\"\nimport getDisplayName from \"./getDisplayName\";\nimport { ScopeContext } from \"./Process\";\n\n\n/**\n * High-order component to receive all standard enviroment contexts as props.\n *\n * This is not needed for process view component which receive those properties in any case.\n * \n * @param Component\n * @return {React.Component} component with environment props\n */\nexport default function withScope(Component)\n{\n    return (\n        class WithComponent extends React.Component {\n\n            static displayName = \"withScope(\" + getDisplayName(Component) + \")\";\n\n            render()\n            {\n\n                return (\n                    <ScopeContext.Consumer>\n                        {\n                            ctx => <Component\n                                {... this.props}\n                                { ... ctx }\n                            />\n\n                        }\n                    </ScopeContext.Consumer>\n                );\n            }\n        }\n    );\n}\n\n\n"]}