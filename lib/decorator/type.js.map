{"version":3,"sources":["../../src/decorator/type.js"],"names":["type","LIST_PREFIX","defineTypeProperty","target","typeName","Object","defineProperty","enumerable","configurable","writable","value","inputSchema","config","Error","unwrapped","indexOf","substr","length","typeDef","getType","name","descriptor","Array","isArray","i","kind"],"mappings":";;;;;kBAyBwBA,I;;AAzBxB;;;;;;AAGA,IAAMC,cAAc,OAApB;;AAGA,SAASC,kBAAT,CAA4BC,MAA5B,EAAoCC,QAApC,EACA;AACIC,WAAOC,cAAP,CAAsBH,MAAtB,EAA8B,OAA9B,EAAuC;AACnCI,oBAAY,IADuB;AAEnCC,sBAAc,KAFqB;AAGnCC,kBAAU,IAHyB;AAInCC,eAAON;AAJ4B,KAAvC;AAMH;;AAGD;;;;;;;;AAQe,SAASJ,IAAT,CAAcI,QAAd,EAAwB;;AAEnC;;AAFmC,QAI5BO,WAJ4B,GAIbC,gBAJa,CAI5BD,WAJ4B;;;AAMnC,QAAIA,eAAe,IAAnB,EACA;AACI,cAAM,IAAIE,KAAJ,CAAU,+BAAV,CAAN;AACH;;AAED,QAAIC,kBAAJ;AACA,QAAIV,SAASW,OAAT,CAAiBd,WAAjB,MAAkC,CAAtC,EACA;AACIG,mBAAW,MAAX;AACAU,oBAAYV,SAASY,MAAT,CAAgBf,YAAYgB,MAA5B,CAAZ;AACH,KAJD,MAMA;AACIH,oBAAYV,QAAZ;AACH;;AAED,QAAMc,UAAUP,YAAYQ,OAAZ,CAAoBL,SAApB,CAAhB;AACA,QAAI,CAACI,OAAL,EACA;AACI,cAAM,IAAIL,KAAJ,CAAU,sDAAsDC,SAAtD,GAAkE,GAA5E,CAAN;AACH;;AAED,QAAIV,aAAa,MAAjB,EACA;AACI;;AAEA,eAAO,SAASJ,IAAT,CAAcG,MAAd,EAAsBiB,IAAtB,EAA4BC,UAA5B,EAAwC;AAC3C,gBAAI,CAACC,MAAMC,OAAN,CAAcpB,MAAd,CAAL,EACA;AACI,sBAAM,IAAIU,KAAJ,CAAU,wBAAwBT,QAAxB,GAAmC,iCAAnC,GAAuED,MAAjF,CAAN;AACH;;AAED,iBAAK,IAAIqB,IAAI,CAAb,EAAgBA,IAAIrB,OAAOc,MAA3B,EAAmCO,GAAnC,EACA;AACItB,mCAAmBC,OAAOqB,CAAP,CAAnB,EAA8BV,SAA9B;AACH;AACD,mBAAOO,UAAP;AACH,SAXD;AAYH,KAhBD,MAiBK,IAAIH,QAAQO,IAAR,KAAiB,QAArB,EACL;AACI;AACA,eAAO,SAASzB,IAAT,CAAcG,MAAd,EAAsBiB,IAAtB,EAA4BC,UAA5B,EAAwC;;AAE3CnB,+BAAmBC,MAAnB,EAA2BC,QAA3B;AACA,mBAAOiB,UAAP;AACH,SAJD;AAKH,KARI,MAUL;AACI;AACA,eAAO,SAASrB,IAAT,CAAcG,MAAd,EAAsBiB,IAAtB,EAA4BC,UAA5B,EAAwC;;AAE3C,mBAAOA,UAAP;AACH,SAHD;AAIH;AACJ","file":"type.js","sourcesContent":["import config from \"../config\"\n\n\nconst LIST_PREFIX = \"List:\";\n\n\nfunction defineTypeProperty(target, typeName)\n{\n    Object.defineProperty(target, \"_type\", {\n        enumerable: true,\n        configurable: false,\n        writable: true,\n        value: typeName\n    });\n}\n\n\n/**\n * Decorator factory to annotate DomainQL types for Scope observables. Currently not actually doing anything, for now just an\n * annotation of types.\n *\n * @param typeName      GraphQL input type name\n *\n * @return {*}\n */\nexport default function type(typeName) {\n\n    //console.log(\"@TYPE\", typeName);\n\n    const {inputSchema} = config;\n\n    if (inputSchema == null)\n    {\n        throw new Error(\"InputSchema not set in config\");\n    }\n\n    let unwrapped;\n    if (typeName.indexOf(LIST_PREFIX) === 0)\n    {\n        typeName = \"List\";\n        unwrapped = typeName.substr(LIST_PREFIX.length);\n    }\n    else\n    {\n        unwrapped = typeName;\n    }\n\n    const typeDef = inputSchema.getType(unwrapped);\n    if (!typeDef)\n    {\n        throw new Error(\"Could not find input schema definition for type '\" + unwrapped + \"'\");\n    }\n\n    if (typeName === \"List\")\n    {\n        //console.log(\"list decorator\", typeDef);\n\n        return function type(target, name, descriptor) {\n            if (!Array.isArray(target))\n            {\n                throw new Error(\"@type says it's a '\" + typeName + \"', but the target is no array: \" + target);\n            }\n\n            for (let i = 0; i < target.length; i++)\n            {\n                defineTypeProperty(target[i], unwrapped);\n            }\n            return descriptor;\n        };\n    }\n    else if (typeDef.kind === \"OBJECT\")\n    {\n        //console.log(\"object decorator\", typeDef);\n        return function type(target, name, descriptor) {\n\n            defineTypeProperty(target, typeName);\n            return descriptor;\n        };\n    }\n    else\n    {\n        //console.log(\"object decorator\", typeDef);\n        return function type(target, name, descriptor) {\n\n            return descriptor;\n        };\n    }\n}\n"]}