{"version":3,"sources":["../src/standard-queries.js"],"names":["deleteDomainObject","storeDomainObject","DeleteQuery","GraphQLQuery","StoreQuery","type","id","execute","domainObject"],"mappings":";;;;;QA4BgBA,kB,GAAAA,kB;QAQAC,iB,GAAAA,iB;;AAnChB;;;;;;AAGA;AACA,IAAMC,cAAc,IAAIC,sBAAJ,8HAApB;;AAMA;AAXA;AAYA,IAAMC,aAAa,IAAID,sBAAJ,kIAAnB;;AAMA;;;;;;;;;;AAUO,SAASH,kBAAT,CAA4BK,IAA5B,EAAkCC,EAAlC,EACP;AACI,WAAOJ,YAAYK,OAAZ,CAAoB;AACvBF,kBADuB;AAEvBC;AAFuB,KAApB,CAAP;AAIH;;AAEM,SAASL,iBAAT,CAA2BO,YAA3B,EACP;AACI,WAAOJ,WAAWG,OAAX,CAAmB;AACtBC;AADsB,KAAnB,CAAP;AAGH","file":"standard-queries.js","sourcesContent":["// language=GraphQL\nimport GraphQLQuery from \"./GraphQLQuery\";\n\n\n// language=GraphQL\nconst DeleteQuery = new GraphQLQuery(`\n    mutation deleteDomainObject($type: String!, $id: String!){\n        deleteDomainObject( type: $type, id: $id)\n    }`\n);\n\n// language=GraphQL\nconst StoreQuery = new GraphQLQuery(`\n    mutation storeDomainObject($domainObject: DomainObject!){\n        storeDomainObject(domainObject: $domainObject)\n    }`\n);\n\n/**\n * Deletes the given domain object with the given id.\n *\n * @param {String} type     domain type name\n * @param {String} id       id field\n *\n * @return {Promise<Boolean, Array>} resolves to a boolean that is true when exactly one row was deleted from the table.\n *                                   Rejects if the domain object couldn't be deleted -- either because it is still referenced\n *                                   or because the table has no id field.\n */\nexport function deleteDomainObject(type, id)\n{\n    return DeleteQuery.execute({\n        type,\n        id\n    });\n}\n\nexport function storeDomainObject(domainObject)\n{\n    return StoreQuery.execute({\n        domainObject\n    });\n}\n"]}