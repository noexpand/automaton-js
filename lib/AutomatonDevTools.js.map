{"version":3,"sources":["../src/AutomatonDevTools.js"],"names":["AutomatonDevTools","process","env","NODE_ENV","DEV_TOOLS_CSS","require","devToolsModule","JSONTree","default","ToolbarButton","props","active","onToggle","className","React","Component","DevTools","GraphControl","LogControl","UpdatesControl","state","isOpen","toggle","setState","left","window","innerWidth","timeout","Object","keys","map","value","name","ModalExample","modal","bind","externalCloseBtn","position","top","right","buttonLabel"],"mappings":";;;;;;;;;;AAAA;;;;AACA;;;;AAEA;;AAEA;;AACA;;;;;;;;;;;;AAGA,IAAIA,0BAAJ;AACA,IAAIC,QAAQC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EACA;AACI;AACAH,wBAAoB,MAApB;AACH,CAJD,MAMA;AACI;AACA,QAAMI,gBAAgBC,QAAQ,2BAAR,CAAtB;AACA;AACA,QAAMC,iBAAiBD,QAAQ,qBAAR,CAAvB;;AAEA,QAAME,WAAWF,QAAQ,iBAAR,EAA2BG,OAA5C;;AANJ,QASUC,aATV;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA,qCAWQ;AAAA,6BAC0C,KAAKC,KAD/C;AAAA,oBACWC,MADX,UACWA,MADX;AAAA,oBACmBC,QADnB,UACmBA,QADnB;AAAA,oBAC6BC,SAD7B,UAC6BA,SAD7B;;AAEI,uBACI;AAAA;AAAA;AACI,mCAAW,0BAAG,qCAAH,EAA0CF,UAAU,QAApD,CADf;AAEI,iCAASC,QAFb;AAGI,8BAAK,QAHT;AAII,wCAAcD;AAJlB;AAMI,yDAAG,WAAW,SAASE,SAAvB;AANJ,iBADJ;AAUH;AAvBT;;AAAA;AAAA,MASgCC,gBAAMC,SATtC;;AAAA,QA2BoBC,QA3BpB,GA2B0EV,cA3B1E,CA2BWE,OA3BX;AAAA,QA2B8BS,YA3B9B,GA2B0EX,cA3B1E,CA2B8BW,YA3B9B;AAAA,QA2B4CC,UA3B5C,GA2B0EZ,cA3B1E,CA2B4CY,UA3B5C;AAAA,QA2BwDC,cA3BxD,GA2B0Eb,cA3B1E,CA2BwDa,cA3BxD;;;AA6BInB,wBAAoB;AAAA;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;AAAA;;AAAA,mMAGZoB,KAHY,GAGJ;AACJC,wBAAQ;AADJ,aAHI,SAOZC,MAPY,GAOH;AAAA,uBAAM,OAAKC,QAAL,CAAc,EAACF,QAAQ,CAAC,OAAKD,KAAL,CAAWC,MAArB,EAAd,CAAN;AAAA,aAPG;AAAA;;AAAA;AAAA;AAAA,qCAWZ;AACI,oBAAIpB,QAAQC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EACA;AACI,2BAAO,KAAP;AACH;;AAJL,oBAMWD,GANX,GAMkB,KAAKQ,KANvB,CAMWR,GANX;AAAA,oBAOWmB,MAPX,GAOqB,KAAKD,KAP1B,CAOWC,MAPX;;;AASI,uBACI;AAAC,mCAAD,CAAO,QAAP;AAAA;AACI,kDAAC,QAAD,IAAU,aAAV,GADJ;AAGI;AAAA;AAAA,0BAAK,WAAU,wBAAf,EAAwC,OAAO,EAACG,MAAOC,OAAOC,UAAP,GAAoB,IAArB,GAA6B,CAApC,EAA/C;AACI;AAAC,wCAAD;AAAA;AACI,0DAAC,aAAD,IAAe,WAAU,cAAzB;AADJ,yBADJ;AAII;AAAC,sCAAD;AAAA;AAEI,0DAAC,aAAD,IAAe,WAAU,aAAzB;AAFJ,yBAJJ;AAQI;AAAC,0CAAD;AAAA;AAEI,0DAAC,aAAD,IAAe,WAAU,YAAzB;AAFJ,yBARJ;AAYI,sDAAC,aAAD,IAAe,QAAQL,MAAvB,EAA+B,WAAU,SAAzC,EAAmD,UAAU,KAAKC,MAAlE;AAZJ,qBAHJ;AAiBI;AAAC,yCAAD;AAAA;AACI,oCAAQD,MADZ;AAEI,oCAAQ,KAAKC,MAFjB;AAGI,sCAAU,KAHd;AAII,6CAAiB,EAACK,SAAS,GAAV;AAJrB;AAMI;AAAC,mDAAD;AAAA;AAAA;AAAA,yBANJ;AAOI;AAAC,iDAAD;AAAA;AAEQC,mCAAOC,IAAP,CAAY3B,GAAZ,EAAiB4B,GAAjB,CAAqB,gBAAQ;AACzB,oCAAMC,QAAQ7B,IAAI8B,IAAJ,CAAd;;AAEA,oCAAI,wBAAaD,KAAb,CAAJ,EACA;AACI,2CACI;AAAC,uDAAD,CAAO,QAAP;AAAA,0CAAgB,KAAKC,IAArB;AACI;AAAA;AAAA;AAAKA,gDAAL;AAAA;AAAA,yCADJ;AAEI,sEAAC,QAAD,IAAU,aAAa,IAAvB,EAA6B,MAAM,gBAAKD,KAAL,CAAnC;AAFJ,qCADJ;AAMH,iCARD,MASK,IAAIA,SAAS,QAAOA,KAAP,yCAAOA,KAAP,OAAiB,QAA9B,EACL;AACI,2CACI;AAAC,uDAAD,CAAO,QAAP;AAAA,0CAAgB,KAAKC,IAArB;AACI;AAAA;AAAA;AAAKA,gDAAL;AAAA;AAAA,yCADJ;AAEI,sEAAC,QAAD,IAAU,aAAa,IAAvB,EAA6B,MAAOD,KAApC;AAFJ,qCADJ;AAMH,iCARI,MAUL;AACI,2CACI;AAAC,uDAAD,CAAO,QAAP;AAAA,0CAAgB,KAAKC,IAArB;AACI;AAAA;AAAA;AAAKA,gDAAL;AAAA;AAAA,yCADJ;AAEKD;AAFL,qCADJ;AAMH;AACJ,6BA9BD;AAFR;AAPJ;AAjBJ,iBADJ;AA+DH;AAnFW;;AAAA;AAAA,MACFjB,gBAAMC,SADJ,EAApB;AAuFH;;kBAEcf,iB;;AAGf;;IAEMiC,Y;;;AACF,0BAAYvB,KAAZ,EACA;AAAA;;AAAA,iIACUA,KADV;;AAEI,eAAKU,KAAL,GAAa;AACTc,mBAAO;AADE,SAAb;;AAIA,eAAKZ,MAAL,GAAc,OAAKA,MAAL,CAAYa,IAAZ,QAAd;AANJ;AAOC;;;;iCAID;AACI,iBAAKZ,QAAL,CAAc;AACVW,uBAAO,CAAC,KAAKd,KAAL,CAAWc;AADT,aAAd;AAGH;;;iCAID;AACI,gBAAME,mBAAmB;AAAA;AAAA,kBAAQ,WAAU,OAAlB,EAA0B,OAAO,EAACC,UAAU,UAAX,EAAuBC,KAAK,MAA5B,EAAoCC,OAAO,MAA3C,EAAjC;AACQ,6BAAS,KAAKjB,MADtB;AAAA;AAAA,aAAzB;AAEA,mBACI;AAAA;AAAA;AACI;AAAC,sCAAD;AAAA,sBAAQ,OAAM,QAAd,EAAuB,SAAS,KAAKA,MAArC;AAA8C,yBAAKZ,KAAL,CAAW8B;AAAzD;AADJ,aADJ;AAKH;;;;EA7BsB1B,gBAAMC,S","file":"AutomatonDevTools.js","sourcesContent":["import React from \"react\"\nimport cx from \"classnames\"\n\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter } from \"reactstrap\";\n\nimport { isObservable, toJS } from \"mobx\"\nimport withAutomatonEnv from \"./withAutomatonEnv\";\n\n\nlet AutomatonDevTools;\nif (process.env.NODE_ENV === \"production\")\n{\n    // render as empty span\n    AutomatonDevTools = \"span\";\n}\nelse\n{\n    // noinspection JSUnusedLocalSymbols\n    const DEV_TOOLS_CSS = require(\"../automaton-devtools.css\");\n    // optimization friendly late imports\n    const devToolsModule = require(\"mobx-react-devtools\");\n\n    const JSONTree = require(\"react-json-tree\").default;\n\n\n    class ToolbarButton extends React.Component {\n        render()\n        {\n            const {active, onToggle, className} = this.props;\n            return (\n                <button\n                    className={cx(\"btn btn-sm pl-1 pt-1 pr-1 pb-0 mr-1\", active && \"active\")}\n                    onClick={onToggle}\n                    role=\"button\"\n                    aria-pressed={active}\n                >\n                    <i className={\"fas \" + className}/>\n                </button>\n            );\n        }\n    }\n\n\n    const {default: DevTools, GraphControl, LogControl, UpdatesControl} = devToolsModule;\n\n    AutomatonDevTools = withAutomatonEnv(\n        class extends React.Component {\n\n            state = {\n                isOpen: false\n            };\n\n            toggle = () => this.setState({isOpen: !this.state.isOpen});\n\n\n            render()\n            {\n                if (process.env.NODE_ENV === \"production\")\n                {\n                    return false;\n                }\n\n                const {env} = this.props;\n                const {isOpen} = this.state;\n\n                return (\n                    <React.Fragment>\n                        <DevTools noPanel/>\n\n                        <div className=\"automaton-devtools p-0\" style={{left: (window.innerWidth * 0.93) | 0}}>\n                            <GraphControl>\n                                <ToolbarButton className=\"fa-chart-bar\"/>\n                            </GraphControl>\n                            <LogControl>\n                                {/* Must have only one child that takes props: `active` (bool), `onToggle` (func) */}\n                                <ToolbarButton className=\"fa-list-alt\"/>\n                            </LogControl>\n                            <UpdatesControl>\n                                {/* Must have only one child that takes props: `active` (bool), `onToggle` (func) */}\n                                <ToolbarButton className=\"fa-recycle\"/>\n                            </UpdatesControl>\n                            <ToolbarButton active={isOpen} className=\"fa-font\" onToggle={this.toggle}/>\n                        </div>\n                        <Modal\n                            isOpen={isOpen}\n                            toggle={this.toggle}\n                            backdrop={false}\n                            modalTransition={{timeout: 100}}\n                        >\n                            <ModalHeader>Modal title</ModalHeader>\n                            <ModalBody>\n                                {\n                                    Object.keys(env).map(name => {\n                                        const value = env[name];\n\n                                        if (isObservable(value))\n                                        {\n                                            return (\n                                                <React.Fragment key={name}>\n                                                    <h6>{name} (observable)</h6>\n                                                    <JSONTree invertTheme={true} data={toJS(value)}/>\n                                                </React.Fragment>\n                                            )\n                                        }\n                                        else if (value && typeof value === \"object\")\n                                        {\n                                            return (\n                                                <React.Fragment key={name}>\n                                                    <h6>{name} (observable)</h6>\n                                                    <JSONTree invertTheme={true} data={(value)}/>\n                                                </React.Fragment>\n                                            )\n                                        }\n                                        else\n                                        {\n                                            return (\n                                                <React.Fragment key={name}>\n                                                    <h6>{name} (observable)</h6>\n                                                    {value}\n                                                </React.Fragment>\n                                            )\n                                        }\n                                    })\n                                }\n                            </ModalBody>\n                        </Modal>\n                    </React.Fragment>\n                )\n            }\n        }\n    )\n\n}\n\nexport default AutomatonDevTools\n\n\n/* eslint react/no-multi-comp: 0, react/prop-types: 0 */\n\nclass ModalExample extends React.Component {\n    constructor(props)\n    {\n        super(props);\n        this.state = {\n            modal: false\n        };\n\n        this.toggle = this.toggle.bind(this);\n    }\n\n\n    toggle()\n    {\n        this.setState({\n            modal: !this.state.modal\n        });\n    }\n\n\n    render()\n    {\n        const externalCloseBtn = <button className=\"close\" style={{position: \"absolute\", top: \"15px\", right: \"15px\"}}\n                                         onClick={this.toggle}>&times;</button>;\n        return (\n            <div>\n                <Button color=\"danger\" onClick={this.toggle}>{this.props.buttonLabel}</Button>\n            </div>\n        );\n    }\n}\n\n\n\n"]}