{"version":3,"sources":["../../src/ui/Button.js"],"names":["Button","onClick","props","action","transition","context","env","process","className","name","icon","text","React","Component","propTypes","PropTypes","func","string","defaultProps"],"mappings":";;;;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;;;;;;;IAGMA,M;;;;;;;;;;;;;;0LAeFC,O,GAAU,cAAM;AAAA,8BAC+B,MAAKC,KADpC;AAAA,gBACLC,MADK,eACLA,MADK;AAAA,gBACGC,UADH,eACGA,UADH;AAAA,gBACeC,OADf,eACeA,OADf;AAAA,gBACwBC,GADxB,eACwBA,GADxB;;;AAGZ,gBAAI,OAAOH,MAAP,KAAkB,UAAtB,EACA;AACIA,uBAAOE,OAAP;AACH,aAHD,MAKA;AAAA,oBACWE,OADX,GACsBD,GADtB,CACWC,OADX;;AAEIA,wBAAQH,UAAR,CAAmBA,UAAnB,EAA+BC,OAA/B;AACH;AACJ,S;;;;;iCAID;AAAA,yBAC0C,KAAKH,KAD/C;AAAA,gBACWM,SADX,UACWA,SADX;AAAA,gBACsBC,IADtB,UACsBA,IADtB;AAAA,gBAC4BC,IAD5B,UAC4BA,IAD5B;AAAA,gBACkCC,IADlC,UACkCA,IADlC;;;AAGI,mBACI;AAAA;AAAA;AACI,0BAAK,QADT;AAEI,0BAAMF,IAFV;AAGI,+BAAWD,SAHf;AAII,6BAAS,KAAKP;AAJlB;AAOQS,wBACI,8BAAC,cAAD;AACI,+BACI,0BACIA,IADJ,EAEI,MAFJ;AAFR,kBARZ;AAmBQC;AAnBR,aADJ;AAwBH;;;;EA1DgBC,gBAAMC,S;;AAArBb,M,CAEKc,S,GAAY;AACfX,YAAQY,oBAAUC,IADH;AAEfZ,gBAAYW,oBAAUE,MAFP;AAGfT,eAAWO,oBAAUE,MAHN;AAIfP,UAAMK,oBAAUE,MAJD;AAKfN,UAAMI,oBAAUE;AALD,C;AAFjBjB,M,CAUKkB,Y,GAAe;AAClBV,eAAW,mBADO;AAElBG,UAAM;AAFY,C;kBAoDX,gCAAiBX,MAAjB,C","file":"Button.js","sourcesContent":["import React from \"react\"\nimport withAutomatonEnv from \"../withAutomatonEnv\";\nimport PropTypes from \"prop-types\";\nimport Icon from \"./Icon\";\nimport cx from \"classnames\"\n\n\nclass Button extends React.Component {\n\n    static propTypes = {\n        action: PropTypes.func,\n        transition: PropTypes.string,\n        className: PropTypes.string,\n        icon: PropTypes.string,\n        text: PropTypes.string\n    };\n\n    static defaultProps = {\n        className: \"btn btn-secondary\",\n        text: \"\"\n    };\n\n    onClick = ev => {\n        const {action, transition, context, env} = this.props;\n\n        if (typeof action === \"function\")\n        {\n            action(context)\n        }\n        else\n        {\n            const {process} = env;\n            process.transition(transition, context)\n        }\n    };\n\n\n    render()\n    {\n        const {className, name, icon, text} = this.props;\n\n        return (\n            <button\n                type=\"button\"\n                name={name}\n                className={className}\n                onClick={this.onClick}\n            >\n                {\n                    icon && (\n                        <Icon\n                            className={\n                                cx(\n                                    icon,\n                                    \"pr-1\"\n                                )\n                            }\n                        />\n                    )\n                }\n                {\n                    text\n                }\n            </button>\n        )\n    }\n}\n\n\nexport default withAutomatonEnv(Button)\n"]}