{"version":3,"sources":["../../src/ui/Button.js"],"names":["Button","onClick","props","action","transition","contextFromProps","context","env","formConfig","isDisabled","getContext","entry","getTransitionEntry","discard","root","reset","formInstance","handleSubmit","process","e","console","error","undefined","model","disabled","hasErrors","getTransition","Error","name","currentState","className","icon","text","React","Component","propTypes","PropTypes","func","string","defaultProps"],"mappings":"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","file":"Button.js","sourcesContent":["import React from \"react\"\nimport withAutomatonEnv from \"../withAutomatonEnv\";\nimport { withFormConfig } from \"domainql-form\";\nimport PropTypes from \"prop-types\";\nimport Icon from \"./Icon\";\nimport cx from \"classnames\"\n\nimport { observer } from \"mobx-react\"\n\n\nclass Button extends React.Component {\n\n    static propTypes = {\n        action: PropTypes.func,\n        transition: PropTypes.string,\n        className: PropTypes.string,\n        icon: PropTypes.string,\n        text: PropTypes.string\n    };\n\n    static defaultProps = {\n        className: \"btn btn-secondary\",\n        text: \"\"\n    };\n\n\n    /**\n     * Returns either the explicit context set as prop or the current form object model if present.\n     *\n     * @return {*} context\n     */\n    getContext()\n    {\n        const { context : contextFromProps, formConfig } = this.props;\n        // if no explicit context is set, use original form root (might be null)\n        return contextFromProps !== undefined ? contextFromProps : formConfig.root && formConfig.root.model;\n    }\n\n    onClick = ev => {\n        const { action, transition, context : contextFromProps, env, formConfig } = this.props;\n\n        // double check for safety\n        if (this.isDisabled())\n        {\n            return;\n        }\n\n\n        //console.log(\"BUTTON-CLICK\", { action, transition, context, env })\n\n        if (typeof action === \"function\")\n        {\n            action(this.getContext())\n        }\n        else\n        {\n            const entry = this.getTransitionEntry();\n\n            if (entry.discard)\n            {\n                formConfig.root && formConfig.root.reset();\n            }\n            else\n            {\n                const { formInstance } = formConfig;\n                if (formInstance)\n                {\n                    formInstance.handleSubmit();\n                }\n            }\n\n            try\n            {\n                const { process } = env;\n\n                //console.log(\"TRANSITION\", transition, process);\n                // it's important to take context *after* we submit or reset it above\n                process.transition(transition, this.getContext())\n            }\n            catch (e)\n            {\n                console.error(e);\n            }\n        }\n    };\n\n    isDisabled()\n    {\n        const { transition, formConfig, disabled } = this.props;\n\n        let isDisabled = false;\n\n        if (typeof disabled === \"function\")\n        {\n            isDisabled = disabled(formConfig);\n        }\n\n        // if the `transition` prop is defined ..\n        if (!isDisabled && transition)\n        {\n            const entry = this.getTransitionEntry();\n\n            // .. and we're not discarding and we have errors, then disable button\n            isDisabled = !entry.discard && formConfig.hasErrors();\n        }\n\n        return isDisabled;\n    }\n\n    getTransitionEntry()\n    {\n        const { env, transition } = this.props;\n        const entry = env.process.getTransition(transition);\n        if (!entry)\n        {\n            throw new Error(\"No transition '\" + transition + \"' in \" + env.process.name + \"/\" + env.process.currentState)\n        }\n        return entry;\n    }\n\n\n    render()\n    {\n        const { className, name, icon, text } = this.props;\n\n        return (\n            <button\n                type=\"button\"\n                name={ name }\n                className={ className }\n                disabled={ this.isDisabled() }\n                onClick={ this.onClick }\n            >\n                {\n                    icon && (\n                        <Icon\n                            className={\n                                cx(\n                                    icon,\n                                    \"pr-1\"\n                                )\n                            }\n                        />\n                    )\n                }\n                {\n                    text\n                }\n            </button>\n        )\n    }\n\n\n}\n\n\nexport default withAutomatonEnv(\n    withFormConfig(\n        observer(\n            Button\n        )\n    )\n)\n"]}