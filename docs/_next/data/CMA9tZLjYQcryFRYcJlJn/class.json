{"pageProps":{"title":"Classes","docs":{"handwritten":[{"into":"GraphQLQuery","src":"GraphQLQuery.md","frontmatter":{},"sections":[{"stub":"example","title":"Example","level":3,"content":"<pre><pre class=\"prism-code language-js p-3\" style=\"color:#393A34;background-color:#f6f8fa\"><div class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    </span><span class=\"token comment\" style=\"color:#999988;font-style:italic\">// language=GraphQL</span><span class=\"token plain\"></span></div><div class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    </span><span class=\"token keyword\" style=\"color:#00009f\">const</span><span class=\"token plain\"> myMutation </span><span class=\"token operator\" style=\"color:#393A34\">=</span><span class=\"token plain\"> </span><span class=\"token keyword\" style=\"color:#00009f\">new</span><span class=\"token plain\"> </span><span class=\"token class-name\">GraphQLQuery</span><span class=\"token punctuation\" style=\"color:#393A34\">(</span><span class=\"token template-string template-punctuation string\" style=\"color:#e3116c\">`</span><span class=\"token template-string string\" style=\"color:#e3116c\"></span></div><div class=\"token-line\" style=\"color:#393A34\"><span class=\"token template-string string\" style=\"color:#e3116c\">        mutation myMutation($fooo: String!){</span></div><div class=\"token-line\" style=\"color:#393A34\"><span class=\"token template-string string\" style=\"color:#e3116c\">            myMutation(foo: $foo)</span></div><div class=\"token-line\" style=\"color:#393A34\"><span class=\"token template-string string\" style=\"color:#e3116c\">        }</span><span class=\"token template-string template-punctuation string\" style=\"color:#e3116c\">`</span><span class=\"token plain\"></span></div><div class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    </span><span class=\"token punctuation\" style=\"color:#393A34\">)</span><span class=\"token punctuation\" style=\"color:#393A34\">;</span><span class=\"token plain\"></span></div><div class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\" style=\"display:inline-block\">\n</span></div></pre></pre><p>We most commonly use the declarative variant <a href=\"/misc/#graphql\">graphql</a> to enable data injection.</p>"}],"toc":{"level":3,"name":"example","title":"Example","headings":[]}}],"docs":{"GraphQLQuery":{"name":"GraphQLQuery","source":"src/GraphQLQuery.js","description":{"description":"GraphQL query abstraction for both GraphQL queries and mutations.\n\nCan be used to parse application queries only once and then .execute() them.\n\nThe graphql service will always create a new instance of GraphQLQuery on every request otherwise.","tags":[]},"group":"CLASS","reactDocGen":null,"start":15,"end":80,"members":[{"type":"ClassMethod","name":"constructor","description":{"description":"Create a new GraphQLQuery instance","tags":[{"title":"param","description":"query string","type":{"type":"NameExpression","name":"String"},"name":"query"},{"title":"param","description":"default variables for the query","type":{"type":"NameExpression","name":"object"},"name":"vars"}]},"decorators":[]},{"type":"ClassMethod","name":"getQueryDefinition","description":{"description":"Lazily parses the query string of this query and returns result.","tags":[{"title":"return","description":null,"type":{"type":"NameExpression","name":"QueryDefinition"}}]},"decorators":[]},{"type":"ClassMethod","name":"execute","description":{"description":"Executes this GraphQL query/mutation with the given variables","tags":[]},"decorators":[]},{"type":"ClassMethod","name":"clone","description":{"description":"Clone this query object.","tags":[{"title":"return","description":"new graphql query","type":{"type":"NameExpression","name":"GraphQLQuery"}}]},"decorators":[]}],"category":null,"link":"class#GraphQLQuery"},"InteractiveQueryDefinition":{"name":"InteractiveQueryDefinition","source":"src/model/InteractiveQueryDefinition.js","description":{"description":"Encapsulates a query and a default query config as user-editable query definition","tags":[{"title":"category","description":"iquery"}]},"group":"CLASS","reactDocGen":null,"start":12,"end":24,"members":[],"category":"iquery","link":"class#InteractiveQueryDefinition"},"MergeOperation":{"name":"MergeOperation","source":"src/merge/MergeOperation.js","description":null,"group":"CLASS","reactDocGen":null,"start":1,"end":6,"members":[],"category":null,"link":"class#MergeOperation"},"OfflineQuery":{"name":"OfflineQuery","source":"src/model/OfflineQuery.js","description":{"description":"Offline version of {@link InteractiveQuery} emulating sort, filter and paging functionality.","tags":[{"title":"category","description":"iquery"}]},"group":"CLASS","reactDocGen":null,"start":45,"end":175,"members":[{"type":"ClassMethod","name":"constructor","description":{"description":"Creates a new OfflineQuery running either on array data or the result of an executed {@link InteractiveQuery}","tags":[{"title":"param","description":"source iQuery document or array containing all rows","type":{"type":"UnionType","elements":[{"type":"NameExpression","name":"InteractiveQuery"},{"type":"TypeApplication","expression":{"type":"NameExpression","name":"Array"},"applications":[{"type":"NameExpression","name":"Object"}]}]},"name":"source"}]},"decorators":[]},{"type":"ClassMethod","name":"update","description":{"description":"Updates the current resolved rows based on a new query config.\n\nThe given query config is merged with the current config so you only need to define the changes.\n\nExamples:\n\n```js\n// page to second page\niQuery.update({offset: 10})\n\n// sorty by name descending\niQuery.update({\n    sortFields: [ \"!name\" ]\n})\n```","tags":[{"title":"param","description":"query config structure (see de.quinscape.automaton.model.data.QueryConfig)","type":{"type":"NameExpression","name":"Object"},"name":"queryConfig"},{"title":"return","description":null,"type":{"type":"TypeApplication","expression":{"type":"NameExpression","name":"Promise"},"applications":[{"type":"UnionType","elements":[{"type":"AllLiteral"},{"type":"NameExpression","name":"never"}]}]}}]},"decorators":["action"]},{"type":"ClassMethod","name":"updateCondition","description":{"description":"Updates a component condition in the current query config state.\n\nIf no component node is found, the current condition if present will be ANDed with the component condition","tags":[{"title":"param","description":"condition node","type":{"type":"NameExpression","name":"Object"},"name":"componentCondition"}]},"decorators":["action"]}],"category":"iquery","link":"class#OfflineQuery"},"ViewState":{"name":"ViewState","source":"src/process/ViewState.js","description":{"description":"Encapsulates the static view state in an automaton process. The process keeps the actual transition maps\nbound to process and scope for each of its states.","tags":[]},"group":"CLASS","reactDocGen":null,"start":16,"end":61,"members":[],"category":null,"link":"class#ViewState"},"WorkingSet":{"name":"WorkingSet","source":"src/WorkingSet.js","description":{"description":"Encapsulates a current set of changes to domain objects not yet persisted to the server-side.","tags":[]},"group":"CLASS","reactDocGen":null,"start":1045,"end":2233,"members":[{"type":"ClassProperty","name":"id","description":{"description":"Counter id for this WorkingSet","tags":[{"title":"type","description":null,"type":{"type":"NameExpression","name":"number"}}]},"decorators":[]},{"type":"ClassMethod","name":"onNextChange","description":{"description":"Executes the given callback after the next update has been processed. This callback is only executed *once*.","tags":[{"title":"param","description":null,"type":{"type":"NameExpression","name":"Function"},"name":"cb"}]},"decorators":[]},{"type":"ClassMethod","name":"registerBaseVersion","description":{"description":"Registers the base version of an object before changing it within the working set.\nIf an object with the same type and the same id is already registered, this method does\nnothing.","tags":[{"title":"param","description":"domain object to register the base version of. Can be a complex GraphQL output graph.","type":{"type":"NameExpression","name":"object"},"name":"domainObject"}]},"decorators":["action"]},{"type":"ClassMethod","name":"addNew","description":{"description":"XXX: something similar to this needs to be done if we want to selective follow marked relations according to some","tags":[]},"decorators":["action"]},{"type":"ClassMethod","name":"addChanges","description":{"description":"Adds a domain object as changed object. If it was formerly marked as new object, it will remain a new object, but\nwith updated contents.","tags":[{"title":"param","description":"domain object to register the base version of. Can be a complex GraphQL output graph.","type":{"type":"NameExpression","name":"object"},"name":"domainObject"}]},"decorators":["action"]},{"type":"ClassMethod","name":"markDeleted","description":{"description":"addRelationChanges(domainObject)","tags":[]},"decorators":["action"]},{"type":"ClassMethod","name":"revert","description":{"description":"Reverts the changes for the given domain object in the working set.","tags":[{"title":"param","description":null,"type":null,"name":"domainObject"}]},"decorators":["action"]},{"type":"ClassMethod","name":"clear","description":{"description":"Forgets all changes.","tags":[]},"decorators":["action"]},{"type":"ClassMethod","name":"discard","description":{"description":"Discards all changes by reverting the observables registered as changed back to their original state","tags":[]},"decorators":["action"]},{"type":"ClassMethod","name":"lookup","description":{"description":"Looks up the registration for a given entity","tags":[{"title":"param","description":"entity type name","type":null,"name":"type"},{"title":"param","description":"entity id","type":null,"name":"id"},{"title":"returns","description":"entity registration for that entity","type":{"type":"NameExpression","name":"EntityRegistration"}}]},"decorators":[]},{"type":"ClassMethod","name":"isModified","description":{"description":"Returns true, if there are actual modifications for the given entity, that is either one of its fields changed or\na many-to-many connected entity changed","tags":[{"title":"param","description":"entity object or domain type","type":{"type":"UnionType","elements":[{"type":"NameExpression","name":"Object"},{"type":"NameExpression","name":"String"}]},"name":"entity"}]},"decorators":[]},{"type":"ClassMethod","name":"lookupBase","description":{"description":"Looks up the base object for an given entity","tags":[{"title":"param","description":"entity type name","type":null,"name":"type"},{"title":"param","description":"entity id","type":null,"name":"id"},{"title":"returns","description":"non-observable base object","type":{"type":"NameExpression","name":"object"}}]},"decorators":[]},{"type":"ClassMethod","name":"changes","description":{"description":"Returns the array of changed domain objects except for the deletions. These are the objects with actual changes.\n A changed object that has its changed changed back to the intial value is no longer changed.","tags":[{"title":"returns","description":"array with changed objects","type":{"type":"TypeApplication","expression":{"type":"NameExpression","name":"Array"},"applications":[{"type":"NameExpression","name":"Object"}]}}]},"decorators":["computed"]},{"type":"ClassMethod","name":"newObjects","description":{"description":"Returns an array of new objects of the given type. if no type is given, all new objects are returned.","tags":[]},"decorators":[]},{"type":"ClassMethod","name":"deletions","description":{"description":"Returns the registered deletions in this working set.","tags":[{"title":"returns","description":"array with deleted objects","type":{"type":"TypeApplication","expression":{"type":"NameExpression","name":"Array"},"applications":[{"type":"NameExpression","name":"WorkingSetDeletion"}]}}]},"decorators":["computed"]},{"type":"ClassMethod","name":"merge","description":{"description":"Merges the current changes contained in the working set using the merge functionality and resets the working set.","tags":[{"title":"returns","description":"Promise resolving with the merge-result","type":{"type":"TypeApplication","expression":{"type":"NameExpression","name":"Promise"},"applications":[{"type":"AllLiteral"}]}}]},"decorators":["action"]},{"type":"ClassMethod","name":"load","description":{"description":"Convenience method that loads the entity with the given name and type. If the entity is registered with the\nworking set, that instance is returned. Otherwise the entity is loaded from the given source and registered.\n\nThe source function has to make sure it is safe to edit the domain object directly and should clone the object\nif there is any doubt. load() does *not* clone.","tags":[{"title":"param","description":"Domain type name","type":{"type":"NameExpression","name":"String"},"name":"type"},{"title":"param","description":"Entity id","type":{"type":"NameExpression","name":"String"},"name":"id"},{"title":"param","description":"GraphQL query to load the entity from or a function that returns a promise\n                                         that resolves to the entity data ( (type,id) => Promise<Observable> )","type":{"type":"UnionType","elements":[{"type":"NameExpression","name":"GraphQLQuery"},{"type":"NameExpression","name":"function"}]},"name":"source"},{"title":"return","description":"Promise resolving to the referenced entity","type":{"type":"TypeApplication","expression":{"type":"NameExpression","name":"Promise"},"applications":[{"type":"NameExpression","name":"object"}]}}]},"decorators":[]},{"type":"ClassMethod","name":"undo","description":{"description":"Changes all registered domain objects back to their original values. In contrast to clear() it keeps\nthe registrations alive, so the objects will be immediately be open to accept other changes.","tags":[]},"decorators":["action"]},{"type":"ClassProperty","name":"reducer","description":{"description":"A reactive reducer helper function. The given reducer function ( (domainObject,<T>) => <T> ) is applied to the\ncombined set of domain objects from the given iQuery document and the working set.","tags":[{"title":"param","description":"iQuery document","type":{"type":"NameExpression","name":"InteractiveQuery"},"name":"iQuery"},{"title":"param","description":"reducer function","type":{"type":"NameExpression","name":"function"},"name":"fn"},{"title":"param","description":"initial reducer value","type":{"type":"AllLiteral"},"name":"initial"},{"title":"return","description":"reducer result","type":{"type":"AllLiteral"}}]},"decorators":[]}],"category":null,"link":"class#WorkingSet"},"WorkingSetStatus":{"name":"WorkingSetStatus","source":"src/WorkingSet.js","description":{"description":"Enum for the status of an entity registration","tags":[{"title":"readonly","description":null},{"title":"enum","description":null,"type":{"type":"NameExpression","name":"string"}}]},"group":"CLASS","reactDocGen":null,"start":126,"end":147,"members":[{"type":"StringLiteral","name":"NEW","description":{"description":"Object is registered as a new object","tags":[{"title":"member","description":null,"type":{"type":"NameExpression","name":"string"},"name":null}]}},{"type":"StringLiteral","name":"MODIFIED","description":{"description":"Object is pre-existing and modified.","tags":[{"title":"member","description":null,"type":{"type":"NameExpression","name":"string"},"name":null}]}},{"type":"StringLiteral","name":"DELETED","description":{"description":"Object is marked as deleted.","tags":[{"title":"member","description":null,"type":{"type":"NameExpression","name":"string"},"name":null}]}},{"type":"StringLiteral","name":"REGISTERED","description":{"description":"Base version for the object is registered, but no changes.","tags":[{"title":"member","description":null,"type":{"type":"NameExpression","name":"string"},"name":null}]}}],"category":null,"link":"class#WorkingSetStatus"}},"classes":["GraphQLQuery","InteractiveQueryDefinition","MergeOperation","OfflineQuery","ViewState","WorkingSet","WorkingSetStatus"]}},"__N_SSG":true}