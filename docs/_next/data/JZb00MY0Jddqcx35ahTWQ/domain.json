{"pageProps":{"title":"Domain-Object Helpers","docs":{"handwritten":[],"docs":{"createDomainObject":{"name":"createDomainObject","source":"src/createDomainObject.js","description":{"description":"Creates a new domain object with a new UUID.","tags":[{"title":"category","description":"domain"},{"title":"param","description":"domain type name","type":{"type":"NameExpression","name":"String"},"name":"type"}]},"group":"FUNCTION","reactDocGen":null,"start":27,"end":89,"category":"domain","link":"domain#createDomainObject"},"deleteAttachment":{"name":"deleteAttachment","source":"src/deleteAttachment.js","description":{"description":"Calls the attachment controller to delete the attachment with the given id.\n\nThe deletion might fail if there are still references to the attachment in the database.","tags":[{"title":"category","description":"domain"},{"title":"param","description":"attachment id","type":{"type":"NameExpression","name":"String"},"name":"attachmentId"},{"title":"return","description":"resolves after the promise has been successfully deleted, rejects otherwise","type":{"type":"TypeApplication","expression":{"type":"NameExpression","name":"Promise"},"applications":[{"type":"NameExpression","name":"void"}]}}]},"group":"FUNCTION","reactDocGen":null,"start":16,"end":43,"category":"domain","link":"domain#deleteAttachment"},"deleteDomainObject":{"name":"deleteDomainObject","source":"src/standard-queries.js","description":{"description":"Deletes the given domain object with the given id.","tags":[{"title":"category","description":"domain"},{"title":"param","description":"domain type name","type":{"type":"NameExpression","name":"String"},"name":"type"},{"title":"param","description":"id field as string or number or generic scalar object. is converted into a generic scalar object\n                                     if it is not one already","type":{"type":"AllLiteral"},"name":"id"}]},"group":"FUNCTION","reactDocGen":null,"start":66,"end":73,"category":"domain","link":"domain#deleteDomainObject"},"extractTypeData":{"name":"extractTypeData","source":"src/extractTypeData.js","description":{"description":"Extracts type data of a specified type from the given object. The method will return a plain object containing\nonly the properties of the specified type.","tags":[{"title":"category","description":"domain"},{"title":"param","description":"GraphQL type name","type":{"type":"NameExpression","name":"String"},"name":"typeName"},{"title":"param","description":"object.","type":{"type":"UnionType","elements":[{"type":"NameExpression","name":"Observable"},{"type":"NameExpression","name":"object"}]},"name":"obj"},{"title":"return","description":"Object containing just the type fields (and _type)","type":{"type":"NameExpression","name":"object"}}]},"group":"FUNCTION","reactDocGen":null,"start":17,"end":43,"category":"domain","link":"domain#extractTypeData"},"generateDomainObjectId":{"name":"generateDomainObjectId","source":"src/standard-queries.js","description":{"description":"Generates a new unique id for the given domain type using the application specific id generator\n(a server-side Spring bean implementing de.quinscape.automaton.runtime.domain.IdGenerator)","tags":[{"title":"category","description":"domain"},{"title":"param","description":"domain type name","type":{"type":"NameExpression","name":"String"},"name":"domainType"},{"title":"returns","description":"resolves to a new unique id value","type":{"type":"TypeApplication","expression":{"type":"NameExpression","name":"Promise"},"applications":[{"type":"AllLiteral"}]}}]},"group":"FUNCTION","reactDocGen":null,"start":150,"end":157,"category":"domain","link":"domain#generateDomainObjectId"},"storeDomainObject":{"name":"storeDomainObject","source":"src/standard-queries.js","description":{"description":"Stores a single domain object and resolves to the id of the stored object. You can use special id values (e.g. \"\" for UUIDGenerator an or 0 for SequenceIdGenerator)\nfor them to be replaced with a new UUID or autoincrement id.","tags":[{"title":"category","description":"domain"},{"title":"param","description":"domain object","type":{"type":"NameExpression","name":"object"},"name":"domainObject"},{"title":"returns","description":"resolves to the id of the stored object.","type":{"type":"TypeApplication","expression":{"type":"NameExpression","name":"Promise"},"applications":[{"type":"AllLiteral"}]}}]},"group":"FUNCTION","reactDocGen":null,"start":111,"end":118,"category":"domain","link":"domain#storeDomainObject"},"storeDomainObjects":{"name":"storeDomainObjects","source":"src/standard-queries.js","description":{"description":"Stores a heterogeneous list of domain objects. You can use special id values (e.g. \"\" for UUIDGenerator an or 0 for SequenceIdGenerator)\nfor them to be replaced with a new UUID or autoincrement id.","tags":[{"title":"category","description":"domain"},{"title":"param","description":"list of domain objects","type":{"type":"TypeApplication","expression":{"type":"NameExpression","name":"Array"},"applications":[{"type":"NameExpression","name":"object"}]},"name":"domainObjects"},{"title":"returns","description":"resolves to an array of id values","type":{"type":"TypeApplication","expression":{"type":"NameExpression","name":"Promise"},"applications":[{"type":"AllLiteral"}]}}]},"group":"FUNCTION","reactDocGen":null,"start":131,"end":138,"category":"domain","link":"domain#storeDomainObjects"},"updateAssociations":{"name":"updateAssociations","source":"src/standard-queries.js","description":{"description":"Updates a many-to-many / associative entity from one of the associated objects. Ids may be placeholder id values.","tags":[{"title":"category","description":"domain"},{"title":"param","description":"options","type":{"type":"NameExpression","name":"Object"},"name":"opts"},{"title":"param","description":"Name of the associative entity ( e.g. \"BazLink\" )","type":{"type":"NameExpression","name":"String"},"name":"opts.domainType"},{"title":"param","description":"Array of id values for the source object. Each will be automatically wrapped as generic scalar unless it already is an object in which case it is used as-is.","type":{"type":"TypeApplication","expression":{"type":"NameExpression","name":"Array"},"applications":[{"type":"UnionType","elements":[{"type":"NameExpression","name":"object"},{"type":"AllLiteral"}]}]},"name":"opts.sourceIds"}]},"group":"FUNCTION","reactDocGen":null,"start":202,"end":246,"category":"domain","link":"domain#updateAssociations"},"uploadAttachment":{"name":"uploadAttachment","source":"src/uploadAttachment.js","description":{"description":"Uploads the given file as attachment","tags":[{"title":"category","description":"domain"},{"title":"param","description":"attachment id to store the attachment under. Might be an already existing id.","type":{"type":"NameExpression","name":"String"},"name":"attachmentId"},{"title":"param","description":"Description of the attachment / former file name","type":{"type":"NameExpression","name":"String"},"name":"description"},{"title":"param","description":"Media type for the attachment. If this is an empty string, the Java side will guess the type","type":{"type":"NameExpression","name":"String"},"name":"type"}]},"group":"FUNCTION","reactDocGen":null,"start":18,"end":56,"category":"domain","link":"domain#uploadAttachment"}},"functions":["createDomainObject","deleteAttachment","deleteDomainObject","extractTypeData","generateDomainObjectId","storeDomainObject","storeDomainObjects","updateAssociations","uploadAttachment"]}},"__N_SSG":true}