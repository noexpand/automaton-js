{"pageProps":{"name":"form-structure","markdown":{"src":"explanation-form-structure.md","frontmatter":{"title":"Form Design in domainql-form","date":"2021-9-16"},"sections":[{"stub":"form-design-in-domainql-form","title":"Form Design in domainql-form","level":1,"content":"<p>This document goes deeper into the high-level design aspects of domainql-form. How I initially envisioned them to work and how they evolved over time driven by our experiences with it.</p>"},{"stub":"first-concept","title":"First concept","level":2,"content":"<p>The first concept was really simple. We have a MobX domain object that represents the root object for the part of the domain we manage with the form, and then we have the <em><div></div></em> componen&gt;</p><p>The <em><div></div></em> components reference paths within the object graph by lodash like paths. Here for our example <em>&quot;owner.name&quot;</em>, which first references the owner object that is embedded as prop&gt;</p><p>I mostly imagined one big <em><div></div></em> component per view.</p><p>[<img src=\"/media/form-1.png\" alt=\"Diagram showing the initially envisioned connection between the Form component and MobX domain object.\"/>]</p><p>This works and for large parts still works this way, but over time we slowly evolved into a more complex model.</p>"},{"stub":"problem-html","title":"Problem: HTML","level":3,"content":"<p>The first thing that became on issue was the of course well-known fact that you can&#x27;t nest forms within <em>HTML</em>. And at first it seems like, duh, who would do something like that? But then y&gt;</p>"},{"stub":"problem-awkard-forms","title":"Problem: Awkard forms","level":3,"content":"<p>While in some cases it is just natural to have sub-ordinate objects connected in the form and to edit fields within those, but as soon as you get to lists or deeply nested property paths it&gt;</p>"},{"stub":"solution-many-forms-paradigm","title":"Solution: Many Forms Paradigm","level":2,"content":"<p>So we obviously need to be able to have many forms, often referencing the same object. But we also have cases where we want to edit the nth element out of a list of associated entities.</p><p>The form components now point anywhere they like. One root object, many root objects, objects within root objects, doesn&#x27;t matter.</p><p>[<img src=\"/media/form-2.png\" alt=\"Diagram showing the new &quot;Many Forms&quot; approach \"/>]</p><p>We just have many forms that write into the same (non-isolated) objects. These <em><div></div></em> components all have their own <em><form></form></em> elements. But what we want most of the time is that the form&gt;</p><p>If the user has entered erroneous data and there is an error displayed, all non-discarding buttons must be disabled. Only things like <em>&quot;Cancel&quot;</em> can remain enabled.</p>"},{"stub":"formcontext","title":"FormContext","level":2,"content":"<p>This orchestration of <em><div></div></em> component functionality is handled by the new FormContext class. There is a default context that is always used unless the application author created and ref&gt;</p><p>The FormContext also registers all available memoized field-contexts which can be used to implement high-level form behavior on top of domainql-form.</p>"}],"toc":{"level":1,"name":"form-design-in-domainql-form","title":"Form Design in domainql-form","headings":[{"level":2,"name":"first-concept","title":"First concept","headings":[{"level":3,"name":"problem-html","title":"Problem: HTML","headings":[]},{"level":3,"name":"problem-awkard-forms","title":"Problem: Awkard forms","headings":[]}]},{"level":2,"name":"solution-many-forms-paradigm","title":"Solution: Many Forms Paradigm","headings":[]},{"level":2,"name":"formcontext","title":"FormContext","headings":[]}]}},"title":"Form Design in domainql-form","prev":{"src":"explanation-filter-dsl.md","frontmatter":{"title":"Filter DSL","date":"2021-04-08T00:00:00.000Z"},"sections":[{"stub":"filterdsl-full-stack-filtering-","title":"FilterDSL: Full-stack filtering ","level":1,"content":"<p>The FilterDSL was initially developed for the needs of the InteractiveQuery mechanism but quickly grew into the\ngeneral-purpose filtering tool it is now.</p>"},{"stub":"origins-jooq-conditions","title":"Origins: JOOQ Conditions","level":2,"content":"<p>The JOOQ library on which DomainQL is offers a typed Java DSL for writing complex SQL statements in Java. A part of this\nis the JOOQ conditions in, for example in the WHERE clause.</p><p>The Automaton-Js FilterDSL is a JavaScript API modeled after that part of the JOOQ API.</p>"},{"stub":"filter-execution-across-the-stack","title":"Filter Execution Across the stack","level":2,"content":"<p>The FilterDSL functions produce a JSON graph that can be transmitted to the server and back and that can be transformed\ninto an actual filter in three different ways now:</p><ul><li>It can be transformed into a JOOQ condition that then gets executed as SQL</li><li>It can be transformed into a Java object filter. This is for example used to filter pub-sub messages for subscriptions.</li><li>It can be transformed into a JavaScript filter function\n</li></ul><p>To be able to transmit the condition graphs from the server to the client and back via GraphQL, we have special scalar\nimplementations that handle that with structural validation. Semantic validation is up to the filter transformer.</p>"},{"stub":"sql-execution","title":"SQL Execution","level":3,"content":"<p>The SQL execution is baked into Interactive Query mechanism but can also be used independently of that.</p><pre><pre class=\"prism-code language-java p-3\" style=\"color:#393A34;background-color:#f6f8fa\"><div class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">import de.quinscape.automaton.runtime.data.FilterTransformer;</span></div><div class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">import de.quinscape.automaton.runtime.data.FieldResolver;</span></div><div class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">import de.quinscape.automaton.runtime.data.SimpleFieldResolver;</span></div><div class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\" style=\"display:inline-block\">\n</span></div><div class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\" style=\"display:inline-block\">\n</span></div><div class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">// ...</span></div><div class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">class JOOQConditionExample</span></div><div class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">{</span></div><div class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    </span></div><div class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    // ...</span></div><div class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    FilterTransformer transformer = new FilterTransformer();</span></div><div class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    FieldResolver fieldResolver = new SimpleFieldResolver();</span></div><div class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    Condition condition = transformer.transform(fieldResolver, conditionScalar);</span></div><div class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">}</span></div></pre></pre><p>The fieldResolver resolves <code>field(&quot;name&quot;)&quot;</code> expressions to JOOQ field references. The SimpleFieldResolver uses normal\nSQL semantics.</p>"},{"stub":"java-execution","title":"Java Execution","level":3,"content":"<pre><pre class=\"prism-code language-java p-3\" style=\"color:#393A34;background-color:#f6f8fa\"><div class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">import de.quinscape.automaton.runtime.filter.JavaFilterTransformer;</span></div><div class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">import de.quinscape.automaton.runtime.filter.Filter;</span></div><div class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\" style=\"display:inline-block\">\n</span></div><div class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\" style=\"display:inline-block\">\n</span></div><div class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">// ...</span></div><div class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">class JavaFilterExample</span></div><div class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">{</span></div><div class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\" style=\"display:inline-block\">\n</span></div><div class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    // ...</span></div><div class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    JavaFilterTransformer transformer = new JavaFilterTransformer();</span></div><div class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    // condition is a raw condition Map</span></div><div class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    Filter filter = transformer.transform(condition);</span></div><div class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">}</span></div></pre></pre>"},{"stub":"javascript-execution","title":"JavaScript Execution","level":3,"content":"<pre><pre class=\"prism-code language-js p-3\" style=\"color:#393A34;background-color:#f6f8fa\"><div class=\"token-line\" style=\"color:#393A34\"><span class=\"token keyword module\" style=\"color:#00009f\">import</span><span class=\"token plain\"> </span><span class=\"token imports punctuation\" style=\"color:#393A34\">{</span><span class=\"token imports\"> filterTransformer</span><span class=\"token imports punctuation\" style=\"color:#393A34\">,</span><span class=\"token imports\"> </span><span class=\"token imports maybe-class-name\">FieldResolver</span><span class=\"token imports\"> </span><span class=\"token imports punctuation\" style=\"color:#393A34\">}</span><span class=\"token plain\"> </span><span class=\"token keyword module\" style=\"color:#00009f\">from</span><span class=\"token plain\"> </span><span class=\"token string\" style=\"color:#e3116c\">&quot;@quinscape/automaton-js&quot;</span><span class=\"token plain\"></span></div><div class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\" style=\"display:inline-block\">\n</span></div><div class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\"></span><span class=\"token keyword\" style=\"color:#00009f\">const</span><span class=\"token plain\"> resolver </span><span class=\"token operator\" style=\"color:#393A34\">=</span><span class=\"token plain\"> </span><span class=\"token keyword\" style=\"color:#00009f\">new</span><span class=\"token plain\"> </span><span class=\"token class-name\">FieldResolver</span><span class=\"token punctuation\" style=\"color:#393A34\">(</span><span class=\"token punctuation\" style=\"color:#393A34\">)</span><span class=\"token punctuation\" style=\"color:#393A34\">;</span><span class=\"token plain\"></span></div><div class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\"></span><span class=\"token keyword\" style=\"color:#00009f\">const</span><span class=\"token plain\"> filterFn </span><span class=\"token operator\" style=\"color:#393A34\">=</span><span class=\"token plain\"> </span><span class=\"token function\" style=\"color:#d73a49\">filterTransformer</span><span class=\"token punctuation\" style=\"color:#393A34\">(</span><span class=\"token plain\">condition</span><span class=\"token punctuation\" style=\"color:#393A34\">,</span><span class=\"token plain\"> resolver</span><span class=\"token punctuation\" style=\"color:#393A34\">.</span><span class=\"token property-access\">resolve</span><span class=\"token punctuation\" style=\"color:#393A34\">)</span><span class=\"token punctuation\" style=\"color:#393A34\">;</span><span class=\"token plain\"></span></div><div class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\" style=\"display:inline-block\">\n</span></div><div class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\"></span><span class=\"token comment\" style=\"color:#999988;font-style:italic\">// ... set current object</span><span class=\"token plain\"></span></div><div class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">resolver</span><span class=\"token punctuation\" style=\"color:#393A34\">.</span><span class=\"token property-access\">current</span><span class=\"token plain\"> </span><span class=\"token operator\" style=\"color:#393A34\">=</span><span class=\"token plain\"> </span><span class=\"token punctuation\" style=\"color:#393A34\">{</span><span class=\"token plain\"> name</span><span class=\"token operator\" style=\"color:#393A34\">:</span><span class=\"token plain\"> </span><span class=\"token string\" style=\"color:#e3116c\">&quot;test&quot;</span><span class=\"token punctuation\" style=\"color:#393A34\">,</span><span class=\"token plain\"> num</span><span class=\"token operator\" style=\"color:#393A34\">:</span><span class=\"token plain\"> </span><span class=\"token number\" style=\"color:#36acaa\">3542</span><span class=\"token plain\"> </span><span class=\"token punctuation\" style=\"color:#393A34\">}</span><span class=\"token punctuation\" style=\"color:#393A34\">;</span><span class=\"token plain\"></span></div><div class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\"></span><span class=\"token comment\" style=\"color:#999988;font-style:italic\">// evaluate filterFn against the current object</span><span class=\"token plain\"></span></div><div class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\"></span><span class=\"token keyword control-flow\" style=\"color:#00009f\">if</span><span class=\"token plain\"> </span><span class=\"token punctuation\" style=\"color:#393A34\">(</span><span class=\"token function\" style=\"color:#d73a49\">filterFn</span><span class=\"token punctuation\" style=\"color:#393A34\">(</span><span class=\"token punctuation\" style=\"color:#393A34\">)</span><span class=\"token punctuation\" style=\"color:#393A34\">)</span><span class=\"token plain\"></span></div><div class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\"></span><span class=\"token punctuation\" style=\"color:#393A34\">{</span><span class=\"token plain\"></span></div><div class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    </span></div><div class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\"></span><span class=\"token punctuation\" style=\"color:#393A34\">}</span></div></pre></pre><p>The <a href=\"/iquery#filterTransformer\">filterTransformer</a> returns a filter function that resolves field references via the resolver\nfactory.</p><p>The default FieldResolver resolves fields with normal JavaScript Object graph semantics. (lodash style paths, e.g. &quot;rows.0.name&quot;)</p>"}],"toc":{"level":1,"name":"filterdsl-full-stack-filtering-","title":"FilterDSL: Full-stack filtering ","headings":[{"level":2,"name":"origins-jooq-conditions","title":"Origins: JOOQ Conditions","headings":[]},{"level":2,"name":"filter-execution-across-the-stack","title":"Filter Execution Across the stack","headings":[{"level":3,"name":"sql-execution","title":"SQL Execution","headings":[]},{"level":3,"name":"java-execution","title":"Java Execution","headings":[]},{"level":3,"name":"javascript-execution","title":"JavaScript Execution","headings":[]}]}]},"content":null,"name":"filter-dsl","title":"Filter DSL"},"next":null},"__N_SSG":true}