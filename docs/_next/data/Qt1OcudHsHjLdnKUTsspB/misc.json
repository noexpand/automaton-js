{"pageProps":{"title":"Static Utils and Functions","docs":{"handwritten":[],"docs":{"configurePromiseUI":{"name":"configurePromiseUI","source":"src/util/promiseUI.js","description":{"description":"Registers a converter function that converts the generic result data based on types originating from a given generic java-type or GraphQL type.","tags":[{"title":"param","description":"Fully qualified generic type or GraphQL type to register the option converter for","type":{"type":"NameExpression","name":"String"},"name":"type"},{"title":"param","description":"options converter converting instance of the type to react-toastify options","type":{"type":"NameExpression","name":"Function"},"name":"converterFn"}]},"group":"FUNCTION","reactDocGen":null,"start":17,"end":30,"category":null,"link":"misc#configurePromiseUI"},"equalsScalar":{"name":"equalsScalar","source":"src/util/equalsScalar.js","description":{"description":"Returns true when the given scalar values are equal. The equality rules are scalar type dependent.\nMany scalar types use instance equality ( === ), while e.g. the Date based types compare time stamps.","tags":[{"title":"param","description":"scalar type name","type":{"type":"NameExpression","name":"String"},"name":"scalarType"},{"title":"param","description":"scalar value a","type":{"type":"AllLiteral"},"name":"a"},{"title":"param","description":"scalar value b","type":{"type":"AllLiteral"},"name":"b"},{"title":"returns","description":"true if scalar values are equal","type":{"type":"NameExpression","name":"boolean"}}]},"group":"FUNCTION","reactDocGen":null,"start":75,"end":82,"category":null,"link":"misc#equalsScalar"},"getCurrentProcess":{"name":"getCurrentProcess","source":"src/process/Process.js","description":{"description":"Returns the current top-level process.","tags":[{"title":"return","description":"the current process on top","type":{"type":"NameExpression","name":"Process"}}]},"group":"FUNCTION","reactDocGen":null,"start":1622,"end":1625,"category":null,"link":"misc#getCurrentProcess"},"getGenericType":{"name":"getGenericType","source":"src/domain.js","description":{"description":"Looks up the generic type the type with the given name is based on.","tags":[{"title":"param","description":"type name","type":{"type":"NameExpression","name":"String"},"name":"typeName"},{"title":"return","description":"full qualified generic type name or null","type":{"type":"UnionType","elements":[{"type":"NameExpression","name":"String"},{"type":"NullLiteral"}]}}]},"group":"FUNCTION","reactDocGen":null,"start":71,"end":84,"category":null,"link":"misc#getGenericType"},"getWireFormat":{"name":"getWireFormat","source":"src/domain.js","description":{"description":"Returns the wireFormat instance created by the system (or tests)","tags":[{"title":"return","description":"wire format","type":{"type":"NameExpression","name":"WireFormat"}}]},"group":"FUNCTION","reactDocGen":null,"start":341,"end":344,"category":null,"link":"misc#getWireFormat"},"graphql":{"name":"graphql","source":"src/graphql.js","description":{"description":"GraphQL query service.\n\nExecutes the given GraphQL query with the given variables. By default it will automatically perform a wire format\nconversions. The variables are converted from Javascript format to the current wire format and the result received\nis being converted from wire format to Javascript.\n\nYou can pass in a param `autoConvert: false` to disable that behavior.","tags":[{"title":"param","description":"Parameters","type":{"type":"NameExpression","name":"Object"},"name":"params"},{"title":"param","description":"query string","type":{"type":"NameExpression","name":"String"},"name":"params.query"},{"title":"param","description":"query variables","type":{"type":"NameExpression","name":"Object"},"name":"params.variables"},{"title":"param","description":"if false, don't convert input and result ( default is true)","type":{"type":"NameExpression","name":"Object"},"name":"params.autoConvert"},{"title":"returns","description":"Promise resolving to query data","type":{"type":"TypeApplication","expression":{"type":"NameExpression","name":"Promise"},"applications":[{"type":"AllLiteral"},{"type":"AllLiteral"}]}}]},"group":"FUNCTION","reactDocGen":null,"start":151,"end":248,"category":null,"link":"misc#graphql"},"mapIterator":{"name":"mapIterator","source":"src/util/mapIterator.js","description":{"description":"Calls the given callback once for every entry in a ES6 Map and return all return values\nas array","tags":[{"title":"param","description":"input map","type":{"type":"NameExpression","name":"Map"},"name":"map"}]},"group":"FUNCTION","reactDocGen":null,"start":9,"end":21,"category":null,"link":"misc#mapIterator"},"openDialog":{"name":"openDialog","source":"src/util/openDialog.js","description":{"description":"Opens a dialog using the given render function. The render function receives a dialog API object with\nwhich the rendered content can control the dialog.","tags":[{"title":"param","description":"render function ( dialog => react element )","type":{"type":"NameExpression","name":"Function"},"name":"renderFn"}]},"group":"FUNCTION","reactDocGen":null,"start":20,"end":35,"category":null,"link":"misc#openDialog"},"pickSchemaTypes":{"name":"pickSchemaTypes","source":"src/util/pickSchemaTypes.js","description":{"description":"Filters a raw input schema JSON structure to only include the types reachable by a given list of type names\nas starting points.","tags":[{"title":"param","description":"inputSchema or other object containing a \"schema\" and a \"meta\" property.","type":{"type":"NameExpression","name":"object"},"name":"inputSchema"},{"title":"param","description":"types to start at. Queries and Mutations can be referenced by prefixing the method name with \"q:\" or \"m:\" (e.g. \"q:iQueryFoo\")","type":{"type":"TypeApplication","expression":{"type":"NameExpression","name":"Array"},"applications":[{"type":"NameExpression","name":"String"}]},"name":"typeNames"}]},"group":"FUNCTION","reactDocGen":null,"start":79,"end":158,"category":null,"link":"misc#pickSchemaTypes"},"printSchema":{"name":"printSchema","source":"src/util/printSchema.js","description":{"description":"Renders a human-readable GraphQL schema from a JSON schema introspection including the automaton-specific additions.","tags":[{"title":"param","description":"(automaton) schema data","type":{"type":"NameExpression","name":"Object"},"name":"schema"},{"title":"param","description":"newLine to use","type":{"type":"NameExpression","name":"String"},"name":"newLine"}]},"group":"FUNCTION","reactDocGen":null,"start":179,"end":200,"category":null,"link":"misc#printSchema"},"promiseUI":{"name":"promiseUI","source":"src/util/promiseUI.js","description":{"description":"Wrapper for GraphQL-data promises that renders UI messages/\"toasts\" for a given promise.\n\nAllows for control of messages by registering option converter functions for generic types.","tags":[{"title":"param","description":"promise, usually a graphql query","type":{"type":"NameExpression","name":"Promise"},"name":"promise"}]},"group":"FUNCTION","reactDocGen":null,"start":120,"end":220,"category":null,"link":"misc#promiseUI"},"renderEntity":{"name":"renderEntity","source":"src/util/renderEntity.js","description":null,"group":"FUNCTION","reactDocGen":null,"start":41,"end":62,"category":null,"link":"misc#renderEntity"},"shutdown":{"name":"shutdown","source":"src/startup.js","description":{"description":"Deregisters the necessary handlers and shuts down the running automaton app.","tags":[]},"group":"FUNCTION","reactDocGen":null,"start":44,"end":67,"category":null,"link":"misc#shutdown"},"startup":{"name":"startup","source":"src/startup.js","description":{"description":"Entry point to the automaton client-side process engine","tags":[{"title":"param","description":"require.context with all domain .js files","type":null,"name":"ctx"},{"title":"param","description":"dynamic import process loader (name => module )","type":{"type":"NameExpression","name":"function"},"name":"processImporter"},{"title":"param","description":"initial data pushed from server","type":{"type":"NameExpression","name":"Object"},"name":"initial"},{"title":"param","description":"init callback","type":{"type":"NameExpression","name":"Function"},"name":"initFn"},{"title":"return","description":"initial component output","type":{"type":"NameExpression","name":"ReactElement"}}]},"group":"FUNCTION","reactDocGen":null,"start":363,"end":424,"category":null,"link":"misc#startup"},"uri":{"name":"uri","source":"src/uri.js","description":{"description":"Formats a local URI with path patterns and parameters.","tags":[{"title":"param","description":"local location e.g. \"/app/process/{name}\"","type":{"type":"NameExpression","name":"String"},"name":"location"}]},"group":"FUNCTION","reactDocGen":null,"start":50,"end":73,"category":null,"link":"misc#uri"}},"utils":[],"functions":["configurePromiseUI","equalsScalar","getCurrentProcess","getGenericType","getWireFormat","graphql","mapIterator","openDialog","pickSchemaTypes","printSchema","promiseUI","renderEntity","shutdown","startup","uri"]}},"__N_SSG":true}